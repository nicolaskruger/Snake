
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  000202a0  2**0
                  CONTENTS
  4 .ARM          00000000  08008fac  08008fac  000202a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fac  08008fac  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08008fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000114c  200002a0  08009264  000202a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  08009264  000213ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eab6  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006511  00000000  00000000  0005ed7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001aa0  00000000  00000000  00065290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018c8  00000000  00000000  00066d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206ff  00000000  00000000  000685f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017d74  00000000  00000000  00088cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abb5d  00000000  00000000  000a0a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b04  00000000  00000000  0014c644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a0 	.word	0x200002a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d98 	.word	0x08008d98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a4 	.word	0x200002a4
 800014c:	08008d98 	.word	0x08008d98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__gesf2>:
 8000d18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d1c:	e006      	b.n	8000d2c <__cmpsf2+0x4>
 8000d1e:	bf00      	nop

08000d20 <__lesf2>:
 8000d20:	f04f 0c01 	mov.w	ip, #1
 8000d24:	e002      	b.n	8000d2c <__cmpsf2+0x4>
 8000d26:	bf00      	nop

08000d28 <__cmpsf2>:
 8000d28:	f04f 0c01 	mov.w	ip, #1
 8000d2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d3c:	bf18      	it	ne
 8000d3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d42:	d011      	beq.n	8000d68 <__cmpsf2+0x40>
 8000d44:	b001      	add	sp, #4
 8000d46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d4a:	bf18      	it	ne
 8000d4c:	ea90 0f01 	teqne	r0, r1
 8000d50:	bf58      	it	pl
 8000d52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d56:	bf88      	it	hi
 8000d58:	17c8      	asrhi	r0, r1, #31
 8000d5a:	bf38      	it	cc
 8000d5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d60:	bf18      	it	ne
 8000d62:	f040 0001 	orrne.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d6c:	d102      	bne.n	8000d74 <__cmpsf2+0x4c>
 8000d6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d72:	d105      	bne.n	8000d80 <__cmpsf2+0x58>
 8000d74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d78:	d1e4      	bne.n	8000d44 <__cmpsf2+0x1c>
 8000d7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d7e:	d0e1      	beq.n	8000d44 <__cmpsf2+0x1c>
 8000d80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_cfrcmple>:
 8000d88:	4684      	mov	ip, r0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	4661      	mov	r1, ip
 8000d8e:	e7ff      	b.n	8000d90 <__aeabi_cfcmpeq>

08000d90 <__aeabi_cfcmpeq>:
 8000d90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d92:	f7ff ffc9 	bl	8000d28 <__cmpsf2>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	bf48      	it	mi
 8000d9a:	f110 0f00 	cmnmi.w	r0, #0
 8000d9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000da0 <__aeabi_fcmpeq>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff fff4 	bl	8000d90 <__aeabi_cfcmpeq>
 8000da8:	bf0c      	ite	eq
 8000daa:	2001      	moveq	r0, #1
 8000dac:	2000      	movne	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_fcmplt>:
 8000db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db8:	f7ff ffea 	bl	8000d90 <__aeabi_cfcmpeq>
 8000dbc:	bf34      	ite	cc
 8000dbe:	2001      	movcc	r0, #1
 8000dc0:	2000      	movcs	r0, #0
 8000dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_fcmple>:
 8000dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dcc:	f7ff ffe0 	bl	8000d90 <__aeabi_cfcmpeq>
 8000dd0:	bf94      	ite	ls
 8000dd2:	2001      	movls	r0, #1
 8000dd4:	2000      	movhi	r0, #0
 8000dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dda:	bf00      	nop

08000ddc <__aeabi_fcmpge>:
 8000ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de0:	f7ff ffd2 	bl	8000d88 <__aeabi_cfrcmple>
 8000de4:	bf94      	ite	ls
 8000de6:	2001      	movls	r0, #1
 8000de8:	2000      	movhi	r0, #0
 8000dea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dee:	bf00      	nop

08000df0 <__aeabi_fcmpgt>:
 8000df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df4:	f7ff ffc8 	bl	8000d88 <__aeabi_cfrcmple>
 8000df8:	bf34      	ite	cc
 8000dfa:	2001      	movcc	r0, #1
 8000dfc:	2000      	movcs	r0, #0
 8000dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e02:	bf00      	nop

08000e04 <_ZN10Controller6atlValEv>:

Controller::~Controller() {
	// TODO Auto-generated destructor stub
}

void Controller::atlVal(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	osMutexWait(*mutex, 1000);
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <_ZN10Controller6atlValEv+0x94>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 fa7a 	bl	800630c <osMutexWait>
	left = HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin);
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	481f      	ldr	r0, [pc, #124]	; (8000e9c <_ZN10Controller6atlValEv+0x98>)
 8000e1e:	f003 ff43 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <_ZN10Controller6atlValEv+0x9c>)
 8000e30:	701a      	strb	r2, [r3, #0]
	rigth = HAL_GPIO_ReadPin(RIGTH_GPIO_Port,RIGTH_Pin);
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <_ZN10Controller6atlValEv+0x98>)
 8000e38:	f003 ff36 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <_ZN10Controller6atlValEv+0xa0>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	up = HAL_GPIO_ReadPin(UP_GPIO_Port,UP_Pin);
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <_ZN10Controller6atlValEv+0x98>)
 8000e50:	f003 ff2a 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_ZN10Controller6atlValEv+0xa4>)
 8000e62:	701a      	strb	r2, [r3, #0]
	down = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <_ZN10Controller6atlValEv+0x98>)
 8000e68:	f003 ff1e 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <_ZN10Controller6atlValEv+0xa8>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	vel = adRead(&hadc1);
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <_ZN10Controller6atlValEv+0xac>)
 8000e7e:	f000 f81b 	bl	8000eb8 <_ZN10Controller6adReadEP19__ADC_HandleTypeDef>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <_ZN10Controller6atlValEv+0xb0>)
 8000e86:	601a      	str	r2, [r3, #0]
	osMutexRelease(*mutex);
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <_ZN10Controller6atlValEv+0x94>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fa8a 	bl	80063a8 <osMutexRelease>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200002c4 	.word	0x200002c4
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	200002be 	.word	0x200002be
 8000ea4:	200002bf 	.word	0x200002bf
 8000ea8:	200002bc 	.word	0x200002bc
 8000eac:	200002bd 	.word	0x200002bd
 8000eb0:	20000528 	.word	0x20000528
 8000eb4:	200002c0 	.word	0x200002c0

08000eb8 <_ZN10Controller6adReadEP19__ADC_HandleTypeDef>:
	Display::LCD_Write_String(0, 1,to_string(getRigth()));
	Display::LCD_Write_String(0, 2,to_string(getUp()));
	Display::LCD_Write_String(0, 3,to_string(getDown()));
	Display::LCD_Write_String(0, 4, to_string(vel));
}
int32_t Controller::adRead(ADC_HandleTypeDef* hadc){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f003 f97f 	bl	80041c4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, 5)!= HAL_OK){}
 8000ec6:	2105      	movs	r1, #5
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f003 fa29 	bl	8004320 <HAL_ADC_PollForConversion>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d000      	beq.n	8000ee0 <_ZN10Controller6adReadEP19__ADC_HandleTypeDef+0x28>
 8000ede:	e7f2      	b.n	8000ec6 <_ZN10Controller6adReadEP19__ADC_HandleTypeDef+0xe>
	return HAL_ADC_GetValue(hadc);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f003 fb17 	bl	8004514 <HAL_ADC_GetValue>
 8000ee6:	4603      	mov	r3, r0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_ZN10Controller6getDirEv>:
int Controller::getDir(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	for(int i =0;i<val.size();i++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <_ZN10Controller6getDirEv+0x74>)
 8000efc:	f000 f8a7 	bl	800104e <_ZNKSt6vectorIPbSaIS0_EE4sizeEv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	bf8c      	ite	hi
 8000f08:	2301      	movhi	r3, #1
 8000f0a:	2300      	movls	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d022      	beq.n	8000f58 <_ZN10Controller6getDirEv+0x68>
		bool b;
		osMutexWait(*mutex, 1000);
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_ZN10Controller6getDirEv+0x78>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f9f5 	bl	800630c <osMutexWait>
		b=val[i][0];
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4619      	mov	r1, r3
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <_ZN10Controller6getDirEv+0x74>)
 8000f28:	f000 f8a1 	bl	800106e <_ZNSt6vectorIPbSaIS0_EEixEj>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	70fb      	strb	r3, [r7, #3]
		osMutexRelease(*mutex);
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <_ZN10Controller6getDirEv+0x78>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fa34 	bl	80063a8 <osMutexRelease>
		if(!b) return i;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <_ZN10Controller6getDirEv+0x60>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	e005      	b.n	8000f5c <_ZN10Controller6getDirEv+0x6c>
	for(int i =0;i<val.size();i++){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e7d0      	b.n	8000efa <_ZN10Controller6getDirEv+0xa>
	}
	return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200002c8 	.word	0x200002c8
 8000f68:	200002c4 	.word	0x200002c4

08000f6c <_ZNSaIPbEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f889 	bl	800108c <_ZN9__gnu_cxx13new_allocatorIPbEC1Ev>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZNSaIPbED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f887 	bl	80010a0 <_ZN9__gnu_cxx13new_allocatorIPbED1Ev>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZNKSt16initializer_listIPbE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <_ZNKSt16initializer_listIPbE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000fb2:	b590      	push	{r4, r7, lr}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffee 	bl	8000f9c <_ZNKSt16initializer_listIPbE5beginEv>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f8ab 	bl	800111e <_ZNKSt16initializer_listIPbE4sizeEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4423      	add	r3, r4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}

08000fd6 <_ZNSt6vectorIPbSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 8000fd6:	b5b0      	push	{r4, r5, r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	1d38      	adds	r0, r7, #4
 8000fe0:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fe4:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f86e 	bl	80010cc <_ZNSt12_Vector_baseIPbSaIS0_EEC1ERKS1_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffd2 	bl	8000f9c <_ZNKSt16initializer_listIPbE5beginEv>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffd8 	bl	8000fb2 <_ZNKSt16initializer_listIPbE3endEv>
 8001002:	4602      	mov	r2, r0
 8001004:	462b      	mov	r3, r5
 8001006:	4621      	mov	r1, r4
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f893 	bl	8001134 <_ZNSt6vectorIPbSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bdb0      	pop	{r4, r5, r7, pc}

08001018 <_ZNSt6vectorIPbSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681c      	ldr	r4, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8b1 	bl	8001192 <_ZNSt12_Vector_baseIPbSaIS0_EE19_M_get_Tp_allocatorEv>
 8001030:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001032:	461a      	mov	r2, r3
 8001034:	4629      	mov	r1, r5
 8001036:	4620      	mov	r0, r4
 8001038:	f000 f8b5 	bl	80011a6 <_ZSt8_DestroyIPPbS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f853 	bl	80010ea <_ZNSt12_Vector_baseIPbSaIS0_EED1Ev>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}

0800104e <_ZNKSt6vectorIPbSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	109b      	asrs	r3, r3, #2
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_ZNSt6vectorIPbSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
      }
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <_ZN9__gnu_cxx13new_allocatorIPbEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <_ZN9__gnu_cxx13new_allocatorIPbED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <_ZNSt12_Vector_baseIPbSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff61 	bl	8000f84 <_ZNSaIPbED1Ev>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZNSt12_Vector_baseIPbSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f871 	bl	80011c2 <_ZNSt12_Vector_baseIPbSaIS0_EE12_Vector_implC1ERKS1_>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZNSt12_Vector_baseIPbSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001104:	461a      	mov	r2, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f872 	bl	80011f0 <_ZNSt12_Vector_baseIPbSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffd0 	bl	80010b4 <_ZNSt12_Vector_baseIPbSaIS0_EE12_Vector_implD1Ev>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZNKSt16initializer_listIPbE4sizeEv>:
      size() const noexcept { return _M_len; }
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <_ZNSt6vectorIPbSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first,
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	703b      	strb	r3, [r7, #0]
			    _ForwardIterator __last, std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f000 f86f 	bl	8001228 <_ZSt8distanceIPKPbENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800114a:	4603      	mov	r3, r0
 800114c:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start = this->_M_allocate(__n);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6979      	ldr	r1, [r7, #20]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f87c 	bl	8001250 <_ZNSt12_Vector_baseIPbSaIS0_EE11_M_allocateEj>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	441a      	add	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f80d 	bl	8001192 <_ZNSt12_Vector_baseIPbSaIS0_EE19_M_get_Tp_allocatorEv>
 8001178:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800117a:	4622      	mov	r2, r4
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	68b8      	ldr	r0, [r7, #8]
 8001180:	f000 f87a 	bl	8001278 <_ZSt22__uninitialized_copy_aIPKPbPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8001184:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	605a      	str	r2, [r3, #4]
	}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <_ZNSt12_Vector_baseIPbSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <_ZSt8_DestroyIPPbS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f870 	bl	800129a <_ZSt8_DestroyIPPbEvT_S2_>
    }
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZNSt12_Vector_baseIPbSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f870 	bl	80012b4 <_ZNSaIPbEC1ERKS0_>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
	{ }
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZNSt12_Vector_baseIPbSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	if (__p)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <_ZNSt12_Vector_baseIPbSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f861 	bl	80012d0 <_ZNSt16allocator_traitsISaIPbEE10deallocateERS1_PS0_j>
      }
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZSt19__iterator_categoryIPKPbENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <_ZSt8distanceIPKPbENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001232:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffed 	bl	8001216 <_ZSt19__iterator_categoryIPKPbENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 800123c:	462a      	mov	r2, r5
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	4620      	mov	r0, r4
 8001242:	f000 f854 	bl	80012ee <_ZSt10__distanceIPKPbENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8001246:	4603      	mov	r3, r0
    }
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bdb0      	pop	{r4, r5, r7, pc}

08001250 <_ZNSt12_Vector_baseIPbSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <_ZNSt12_Vector_baseIPbSaIS0_EE11_M_allocateEj+0x1e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f851 	bl	800130c <_ZNSt16allocator_traitsISaIPbEE8allocateERS1_j>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <_ZNSt12_Vector_baseIPbSaIS0_EE11_M_allocateEj+0x20>
 800126e:	2300      	movs	r3, #0
      }
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZSt22__uninitialized_copy_aIPKPbPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f84d 	bl	800132a <_ZSt18uninitialized_copyIPKPbPS0_ET0_T_S5_S4_>
 8001290:	4603      	mov	r3, r0
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_ZSt8_DestroyIPPbEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f851 	bl	800134e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPbEEvT_S4_>
    }
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZNSaIPbEC1ERKS0_>:
      allocator(const allocator& __a) throw()
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f897 	bl	80013f4 <_ZN9__gnu_cxx13new_allocatorIPbEC1ERKS2_>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZNSt16allocator_traitsISaIPbEE10deallocateERS1_PS0_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f892 	bl	800140a <_ZN9__gnu_cxx13new_allocatorIPbE10deallocateEPS1_j>
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZSt10__distanceIPKPbENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	109b      	asrs	r3, r3, #2
    }
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <_ZNSt16allocator_traitsISaIPbEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001316:	2200      	movs	r2, #0
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f882 	bl	8001424 <_ZN9__gnu_cxx13new_allocatorIPbE8allocateEjPKv>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZSt18uninitialized_copyIPKPbPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f88e 	bl	8001460 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPbPS2_EET0_T_S7_S6_>
 8001344:	4603      	mov	r3, r0
    }
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPbEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f000 f884 	bl	8001480 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d001      	beq.n	800138a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800138a:	2300      	movs	r3, #0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001390:	4817      	ldr	r0, [pc, #92]	; (80013f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001392:	f007 fa81 	bl	8008898 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f000 f889 	bl	80014b0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800139e:	4603      	mov	r3, r0
 80013a0:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d910      	bls.n	80013ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f007 fa87 	bl	80088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f007 fa76 	bl	80088ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f007 fa75 	bl	80088b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f007 fa70 	bl	80088b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f007 fa9f 	bl	800891a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4619      	mov	r1, r3
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f007 fa69 	bl	80088b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08008db4 	.word	0x08008db4

080013f4 <_ZN9__gnu_cxx13new_allocatorIPbEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <_ZN9__gnu_cxx13new_allocatorIPbE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001416:	68b8      	ldr	r0, [r7, #8]
 8001418:	f007 fa26 	bl	8008868 <_ZdlPv>
      }
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN9__gnu_cxx13new_allocatorIPbE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f851 	bl	80014d8 <_ZNK9__gnu_cxx13new_allocatorIPbE8max_sizeEv>
 8001436:	4602      	mov	r2, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4293      	cmp	r3, r2
 800143c:	bf8c      	ite	hi
 800143e:	2301      	movhi	r3, #1
 8001440:	2300      	movls	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <_ZN9__gnu_cxx13new_allocatorIPbE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001448:	f007 fa23 	bl	8008892 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4618      	mov	r0, r3
 8001452:	f007 f9f0 	bl	8008836 <_Znwj>
 8001456:	4603      	mov	r3, r0
      }
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPbPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f83c 	bl	80014ee <_ZSt4copyIPKPbPS0_ET0_T_S5_S4_>
 8001476:	4603      	mov	r3, r0
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80014ba:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffed 	bl	800149e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80014c4:	462a      	mov	r2, r5
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4620      	mov	r0, r4
 80014ca:	f000 f828 	bl	800151e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80014ce:	4603      	mov	r3, r0
    }
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bdb0      	pop	{r4, r5, r7, pc}

080014d8 <_ZNK9__gnu_cxx13new_allocatorIPbE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80014e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <_ZSt4copyIPKPbPS0_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f81d 	bl	800153a <_ZSt12__miter_baseIPKPbET_S3_>
 8001500:	4604      	mov	r4, r0
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f000 f819 	bl	800153a <_ZSt12__miter_baseIPKPbET_S3_>
 8001508:	4603      	mov	r3, r0
	       __result));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4619      	mov	r1, r3
 800150e:	4620      	mov	r0, r4
 8001510:	f000 f81d 	bl	800154e <_ZSt14__copy_move_a2ILb0EPKPbPS0_ET1_T0_S5_S4_>
 8001514:	4603      	mov	r3, r0
    }
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
    }
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <_ZSt12__miter_baseIPKPbET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <_ZSt14__copy_move_a2ILb0EPKPbPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800154e:	b5b0      	push	{r4, r5, r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f813 	bl	8001586 <_ZSt12__niter_baseIPKPbET_S3_>
 8001560:	4604      	mov	r4, r0
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	f000 f80f 	bl	8001586 <_ZSt12__niter_baseIPKPbET_S3_>
 8001568:	4605      	mov	r5, r0
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f815 	bl	800159a <_ZSt12__niter_baseIPPbET_S2_>
 8001570:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001572:	461a      	mov	r2, r3
 8001574:	4629      	mov	r1, r5
 8001576:	4620      	mov	r0, r4
 8001578:	f000 f819 	bl	80015ae <_ZSt13__copy_move_aILb0EPKPbPS0_ET1_T0_S5_S4_>
 800157c:	4603      	mov	r3, r0
    }
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}

08001586 <_ZSt12__niter_baseIPKPbET_S3_>:
    __niter_base(_Iterator __it)
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <_ZSt12__niter_baseIPPbET_S2_>:
    __niter_base(_Iterator __it)
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <_ZSt13__copy_move_aILb0EPKPbPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f805 	bl	80015d2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPbEEPT_PKS4_S7_S5_>
 80015c8:	4603      	mov	r3, r0
    }
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPbEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	109b      	asrs	r3, r3, #2
 80015e6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPbEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	461a      	mov	r2, r3
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f007 fa79 	bl	8008aee <memmove>
	  return __result + _Num;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
	}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_Z41__static_initialization_and_destruction_0ii>:
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d11d      	bne.n	8001658 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001622:	4293      	cmp	r3, r2
 8001624:	d118      	bne.n	8001658 <_Z41__static_initialization_and_destruction_0ii+0x4c>
vector<bool*> Controller::val = {
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001630:	e883 0003 	stmia.w	r3, {r0, r1}
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fc97 	bl	8000f6c <_ZNSaIPbEC1Ev>
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	ca06      	ldmia	r2, {r1, r2}
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800164a:	f7ff fcc4 	bl	8000fd6 <_ZNSt6vectorIPbSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc96 	bl	8000f84 <_ZNSaIPbED1Ev>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d107      	bne.n	800166e <_Z41__static_initialization_and_destruction_0ii+0x62>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <_Z41__static_initialization_and_destruction_0ii+0x62>
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800166a:	f7ff fcd5 	bl	8001018 <_ZNSt6vectorIPbSaIS0_EED1Ev>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	08008de0 	.word	0x08008de0
 800167c:	200002c8 	.word	0x200002c8

08001680 <_GLOBAL__sub_I__ZN10Controller2upE>:
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
 8001684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff ffbf 	bl	800160c <_Z41__static_initialization_and_destruction_0ii>
 800168e:	bd80      	pop	{r7, pc}

08001690 <_GLOBAL__sub_D__ZN10Controller2upE>:
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
 8001694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ffb7 	bl	800160c <_Z41__static_initialization_and_destruction_0ii>
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN3Map5gridXEv>:

class Map {
protected:
	Map();
public:
	static int gridX(){return 6;}
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	2306      	movs	r3, #6
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_ZN3Map5gridYEv>:
	static int gridY(){return 1;}
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	2301      	movs	r3, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <_ZN7Display8LCD_InitEv>:

Display::~Display() {
	// TODO Auto-generated destructor stub
}

void Display::LCD_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  LCD_Reset();
 80016c0:	f000 f810 	bl	80016e4 <_ZN7Display9LCD_ResetEv>
  LCD_Write_Command(0x21);
 80016c4:	2021      	movs	r0, #33	; 0x21
 80016c6:	f000 f8e1 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
  LCD_Write_Command(0xD0);
 80016ca:	20d0      	movs	r0, #208	; 0xd0
 80016cc:	f000 f8de 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
  LCD_Write_Command(0x20);
 80016d0:	2020      	movs	r0, #32
 80016d2:	f000 f8db 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
  LCD_Write_Command(0x0C);
 80016d6:	200c      	movs	r0, #12
 80016d8:	f000 f8d8 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
  LCD_Clear();
 80016dc:	f000 f830 	bl	8001740 <_ZN7Display9LCD_ClearEv>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN7Display9LCD_ResetEv>:

/**
 * Reset LCD.
 */
void Display::LCD_Reset(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <_ZN7Display9LCD_ResetEv+0x24>)
 80016ee:	f003 faf2 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80016f2:	2032      	movs	r0, #50	; 0x32
 80016f4:	f002 fc6c 	bl	8003fd0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2101      	movs	r1, #1
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <_ZN7Display9LCD_ResetEv+0x24>)
 80016fe:	f003 faea 	bl	8004cd6 <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010800 	.word	0x40010800

0800170c <_ZN7Display15LCD_Set_PostionEhh>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void Display::LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f8b1 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
  LCD_Write_Command(0x80 | PosX);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f8aa 	bl	800188c <_ZN7Display17LCD_Write_CommandEh>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZN7Display9LCD_ClearEv>:

/**
 * Clear all contents on LCD.
 */
void Display::LCD_Clear(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff ffdf 	bl	800170c <_ZN7Display15LCD_Set_PostionEhh>
  for(t=0;t<6;t++)
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d80f      	bhi.n	8001778 <_ZN7Display9LCD_ClearEv+0x38>
  {
    for(k=0;k<84;k++)
 8001758:	2300      	movs	r3, #0
 800175a:	71bb      	strb	r3, [r7, #6]
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	2b53      	cmp	r3, #83	; 0x53
 8001760:	d806      	bhi.n	8001770 <_ZN7Display9LCD_ClearEv+0x30>
    {
      LCD_Write_Data(0x00);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f8ba 	bl	80018dc <_ZN7Display14LCD_Write_DataEh>
    for(k=0;k<84;k++)
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	3301      	adds	r3, #1
 800176c:	71bb      	strb	r3, [r7, #6]
 800176e:	e7f5      	b.n	800175c <_ZN7Display9LCD_ClearEv+0x1c>
  for(t=0;t<6;t++)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	3301      	adds	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e7ec      	b.n	8001752 <_ZN7Display9LCD_ClearEv+0x12>
    }
  }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZN7Display14LCD_Write_CharEh>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void Display::LCD_Write_Char(uint8_t ch) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	3b20      	subs	r3, #32
 800178e:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d810      	bhi.n	80017bc <_ZN7Display14LCD_Write_CharEh+0x3c>
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	7bf9      	ldrb	r1, [r7, #15]
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <_ZN7Display14LCD_Write_CharEh+0x44>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4403      	add	r3, r0
 80017aa:	440b      	add	r3, r1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f894 	bl	80018dc <_ZN7Display14LCD_Write_DataEh>
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3301      	adds	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e7eb      	b.n	8001794 <_ZN7Display14LCD_Write_CharEh+0x14>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000

080017c8 <_ZN7Display16LCD_Write_StringEhhPKc>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void Display::LCD_Write_String(uint8_t PosX, uint8_t PosY,const char * str) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	603a      	str	r2, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	460b      	mov	r3, r1
 80017d6:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 80017d8:	79ba      	ldrb	r2, [r7, #6]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff94 	bl	800170c <_ZN7Display15LCD_Set_PostionEhh>
  while(* str) {
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <_ZN7Display16LCD_Write_StringEhhPKc+0x36>
    LCD_Write_Char(* str);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffc5 	bl	8001780 <_ZN7Display14LCD_Write_CharEh>
    str ++;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
  while(* str) {
 80017fc:	e7f2      	b.n	80017e4 <_ZN7Display16LCD_Write_StringEhhPKc+0x1c>
  }
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZN7Display16LCD_Write_StringEhhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Display::LCD_Write_String(uint8_t PosX, uint8_t PosY,string str) {
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	603a      	str	r2, [r7, #0]
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	460b      	mov	r3, r1
 8001814:	71bb      	strb	r3, [r7, #6]
  LCD_Write_String(PosX, PosY, str.c_str());
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f007 f8bd 	bl	8008996 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800181c:	4602      	mov	r2, r0
 800181e:	79b9      	ldrb	r1, [r7, #6]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffd0 	bl	80017c8 <_ZN7Display16LCD_Write_StringEhhPKc>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN7Display21LCD_Write_String_GridEhhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Display::LCD_Write_String_Grid(uint8_t PosX, uint8_t PosY,string str){
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	460b      	mov	r3, r1
 800183e:	71bb      	strb	r3, [r7, #6]
	LCD_Write_String(PosX*Map::gridX(), PosY*Map::gridY(), str);
 8001840:	f7ff ff2e 	bl	80016a0 <_ZN3Map5gridXEv>
 8001844:	4603      	mov	r3, r0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	79fa      	ldrb	r2, [r7, #7]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	b2dc      	uxtb	r4, r3
 8001850:	f7ff ff2d 	bl	80016ae <_ZN3Map5gridYEv>
 8001854:	4603      	mov	r3, r0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	79ba      	ldrb	r2, [r7, #6]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	b2dd      	uxtb	r5, r3
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f007 f897 	bl	800899a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	461a      	mov	r2, r3
 8001872:	4629      	mov	r1, r5
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ffc6 	bl	8001806 <_ZN7Display16LCD_Write_StringEhhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f007 f87d 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bdb0      	pop	{r4, r5, r7, pc}

0800188c <_ZN7Display17LCD_Write_CommandEh>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void Display::LCD_Write_Command(uint8_t cmd) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2108      	movs	r1, #8
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <_ZN7Display17LCD_Write_CommandEh+0x48>)
 800189c:	f003 fa1b 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2110      	movs	r1, #16
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <_ZN7Display17LCD_Write_CommandEh+0x48>)
 80018a6:	f003 fa16 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 80018aa:	1df9      	adds	r1, r7, #7
 80018ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b0:	2201      	movs	r2, #1
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <_ZN7Display17LCD_Write_CommandEh+0x4c>)
 80018b4:	f004 f856 	bl	8005964 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2108      	movs	r1, #8
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <_ZN7Display17LCD_Write_CommandEh+0x48>)
 80018be:	f003 fa0a 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2110      	movs	r1, #16
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <_ZN7Display17LCD_Write_CommandEh+0x48>)
 80018c8:	f003 fa05 	bl	8004cd6 <HAL_GPIO_WritePin>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010800 	.word	0x40010800
 80018d8:	20000558 	.word	0x20000558

080018dc <_ZN7Display14LCD_Write_DataEh>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void Display::LCD_Write_Data(uint8_t data) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2108      	movs	r1, #8
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <_ZN7Display14LCD_Write_DataEh+0x48>)
 80018ec:	f003 f9f3 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2110      	movs	r1, #16
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <_ZN7Display14LCD_Write_DataEh+0x48>)
 80018f6:	f003 f9ee 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 80018fa:	1df9      	adds	r1, r7, #7
 80018fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001900:	2201      	movs	r2, #1
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <_ZN7Display14LCD_Write_DataEh+0x4c>)
 8001904:	f004 f82e 	bl	8005964 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2108      	movs	r1, #8
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <_ZN7Display14LCD_Write_DataEh+0x48>)
 800190e:	f003 f9e2 	bl	8004cd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2110      	movs	r1, #16
 8001916:	4803      	ldr	r0, [pc, #12]	; (8001924 <_ZN7Display14LCD_Write_DataEh+0x48>)
 8001918:	f003 f9dd 	bl	8004cd6 <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40010800 	.word	0x40010800
 8001928:	20000558 	.word	0x20000558

0800192c <_ZN6EntityC1Ev>:
 *      Author: nicolas-kruger
 */

#include "Entity.h"

Entity::Entity() {
 800192c:	b490      	push	{r4, r7}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <_ZN6EntityC1Ev+0x38>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	f04f 0400 	mov.w	r4, #0
 8001944:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	e9c2 3404 	strd	r3, r4, [r2, #16]
	// TODO Auto-generated constructor stub

}
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bc90      	pop	{r4, r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08008ee8 	.word	0x08008ee8

08001968 <_ZN6EntityD1Ev>:

Entity::~Entity() {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <_ZN6EntityD1Ev+0x1c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	08008ee8 	.word	0x08008ee8

08001988 <_ZN6Entity7colidinEPS_>:
bool Entity::colidin(Entity* other){
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	return this->px==other->px&&this->py==other->py;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f103 0408 	add.w	r4, r3, #8
 800199e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	f7fe ffff 	bl	80009a8 <__aeabi_dcmpeq>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <_ZN6Entity7colidinEPS_+0x4a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f103 0410 	add.w	r4, r3, #16
 80019bc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	f7fe fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <_ZN6Entity7colidinEPS_+0x4a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <_ZN6Entity7colidinEPS_+0x4c>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <_ZN3Map4maxXEv>:
	static int maxX(){return 14;}
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
 80019e0:	230e      	movs	r3, #14
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <_ZN3Map4maxYEv>:
	static int maxY(){return 6;}
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	2306      	movs	r3, #6
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_ZN6Entity4getXEv>:
protected:

public:
	double px=0;
	double py=0;
	int getX(){return px;}
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 0408 	add.w	r4, r3, #8
 8001a06:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	f7fe fffd 	bl	8000a0c <__aeabi_d2iz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}

08001a1c <_ZN6Entity4getYEv>:
	int getY(){return py;}
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0410 	add.w	r4, r3, #16
 8001a2a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4621      	mov	r1, r4
 8001a32:	f7fe ffeb 	bl	8000a0c <__aeabi_d2iz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}

08001a40 <_ZN4FoodC1EPPv>:
 *      Author: nicolas-kruger
 */

#include "Food.h"

Food::Food(osMutexId* mutex):Entity() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff6d 	bl	800192c <_ZN6EntityC1Ev>
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <_ZN4FoodC1EPPv+0x30>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	771a      	strb	r2, [r3, #28]
	this->mutex= mutex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	619a      	str	r2, [r3, #24]
	// TODO Auto-generated constructor stub

}
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08008f04 	.word	0x08008f04

08001a74 <_ZN4FoodD1Ev>:

Food::~Food() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_ZN4FoodD1Ev+0x20>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff6f 	bl	8001968 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08008f04 	.word	0x08008f04

08001a98 <_ZN4FoodD0Ev>:
Food::~Food() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
}
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_ZN4FoodD1Ev>
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f006 fec2 	bl	8008832 <_ZdlPvj>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN4Food4tickEv>:

void Food::tick(){
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	if(!eated) return;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7f1b      	ldrb	r3, [r3, #28]
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d136      	bne.n	8001b3c <_ZN4Food4tickEv+0x84>
	eated = false;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	771a      	strb	r2, [r3, #28]
	osMutexWait(*mutex, 100);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2164      	movs	r1, #100	; 0x64
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fc15 	bl	800630c <osMutexWait>
	px = rand()%Map::maxX();
 8001ae2:	f007 f8cb 	bl	8008c7c <rand>
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	f7ff ff78 	bl	80019dc <_ZN3Map4maxXEv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	fb94 f2f3 	sdiv	r2, r4, r3
 8001af2:	fb03 f302 	mul.w	r3, r3, r2
 8001af6:	1ae3      	subs	r3, r4, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc83 	bl	8000404 <__aeabi_i2d>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	py = rand()%Map::maxY();
 8001b08:	f007 f8b8 	bl	8008c7c <rand>
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	f7ff ff6c 	bl	80019ea <_ZN3Map4maxYEv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	fb94 f2f3 	sdiv	r2, r4, r3
 8001b18:	fb03 f302 	mul.w	r3, r3, r2
 8001b1c:	1ae3      	subs	r3, r4, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc70 	bl	8000404 <__aeabi_i2d>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	osMutexRelease(*mutex);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f004 fc37 	bl	80063a8 <osMutexRelease>
 8001b3a:	e000      	b.n	8001b3e <_ZN4Food4tickEv+0x86>
	if(!eated) return;
 8001b3c:	bf00      	nop
}
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}

08001b44 <_ZN4Food6renderEv>:
void Food::render(){
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	osMutexWait(*mutex, 100);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2164      	movs	r1, #100	; 0x64
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fbd9 	bl	800630c <osMutexWait>
	Display::LCD_Write_String_Grid(getX(),getY(), "0");
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff4b 	bl	80019f8 <_ZN6Entity4getXEv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b2dc      	uxtb	r4, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff57 	bl	8001a1c <_ZN6Entity4getYEv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b2dd      	uxtb	r5, r3
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f006 fe89 	bl	800888e <_ZNSaIcEC1Ev>
 8001b7c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	490f      	ldr	r1, [pc, #60]	; (8001bc4 <_ZN4Food6renderEv+0x80>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 ff3a 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	461a      	mov	r2, r3
 8001b92:	4629      	mov	r1, r5
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff fe4b 	bl	8001830 <_ZN7Display21LCD_Write_String_GridEhhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f006 feed 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f006 fe71 	bl	8008890 <_ZNSaIcED1Ev>
	osMutexRelease(*mutex);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fbf7 	bl	80063a8 <osMutexRelease>
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08008de8 	.word	0x08008de8

08001bc8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <_ZN4nodeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
class node :public Entity{
private:
	string val="*";
public:
	node();
	node(string val){this->val = val;}
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe9d 	bl	800192c <_ZN6EntityC1Ev>
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <_ZN4nodeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f103 0418 	add.w	r4, r3, #24
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fe43 	bl	800888e <_ZNSaIcEC1Ev>
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	490b      	ldr	r1, [pc, #44]	; (8001c3c <_ZN4nodeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8001c10:	4620      	mov	r0, r4
 8001c12:	f006 fef5 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 fe38 	bl	8008890 <_ZNSaIcED1Ev>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3318      	adds	r3, #24
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 feaf 	bl	800898a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	08008f3c 	.word	0x08008f3c
 8001c3c:	08008dec 	.word	0x08008dec

08001c40 <_ZN4nodeC1Eii>:
	node(int px,int py){this->px=px;this->py=py;}
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fe6c 	bl	800192c <_ZN6EntityC1Ev>
 8001c54:	4a15      	ldr	r2, [pc, #84]	; (8001cac <_ZN4nodeC1Eii+0x6c>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f103 0418 	add.w	r4, r3, #24
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fe12 	bl	800888e <_ZNSaIcEC1Ev>
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	461a      	mov	r2, r3
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <_ZN4nodeC1Eii+0x70>)
 8001c72:	4620      	mov	r0, r4
 8001c74:	f006 fec4 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f006 fe07 	bl	8008890 <_ZNSaIcED1Ev>
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f7fe fbbe 	bl	8000404 <__aeabi_i2d>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fbb6 	bl	8000404 <__aeabi_i2d>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	08008f3c 	.word	0x08008f3c
 8001cb0:	08008dec 	.word	0x08008dec

08001cb4 <_ZN4Game3fpsEv>:
#define FPS 10
class Game {
private:
	Game(){}
public:
	static int fps(){return FPS;}
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	230a      	movs	r3, #10
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_ZN10Controller6getVelEv>:
	static bool getUp(){return getSafe(Up);}
	static bool getDown(){return getSafe(Down);}
	static bool getLeft(){return getSafe(Left);}
	static bool getRigth(){return getSafe(Rigth);}
	static int getDir();
	static double getVel(){
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
		osMutexWait(*mutex, 1000);
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <_ZN10Controller6getVelEv+0x84>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 fb19 	bl	800630c <osMutexWait>
		double v = (double)vel*Game::fps()/2/4000;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <_ZN10Controller6getVelEv+0x88>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fb90 	bl	8000404 <__aeabi_i2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	f7ff ffe4 	bl	8001cb4 <_ZN4Game3fpsEv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb88 	bl	8000404 <__aeabi_i2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fbec 	bl	80004d8 <__aeabi_dmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4618      	mov	r0, r3
 8001d06:	4621      	mov	r1, r4
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d10:	f7fe fd0c 	bl	800072c <__aeabi_ddiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <_ZN10Controller6getVelEv+0x8c>)
 8001d22:	f7fe fd03 	bl	800072c <__aeabi_ddiv>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	e9c7 3400 	strd	r3, r4, [r7]
		osMutexRelease(*mutex);
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <_ZN10Controller6getVelEv+0x84>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 fb37 	bl	80063a8 <osMutexRelease>
		return v;
 8001d3a:	e9d7 3400 	ldrd	r3, r4, [r7]
	}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4621      	mov	r1, r4
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	200002c4 	.word	0x200002c4
 8001d4c:	200002c0 	.word	0x200002c0
 8001d50:	40af4000 	.word	0x40af4000

08001d54 <_ZN5Snake5nextXEv>:

class Snake :public Entity{
private:
	osMutexId* mutex;
	float next(float cur,float dc,int max);
	float nextX(){return next(snk[0].px, dx, Map::maxX());}
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3348      	adds	r3, #72	; 0x48
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fc81 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f103 0408 	add.w	r4, r3, #8
 8001d6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	4621      	mov	r1, r4
 8001d76:	f7fe fe71 	bl	8000a5c <__aeabi_d2f>
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001d82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f7fe fe67 	bl	8000a5c <__aeabi_d2f>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	f7ff fe24 	bl	80019dc <_ZN3Map4maxXEv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4622      	mov	r2, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fba9 	bl	80024f2 <_ZN5Snake4nextEffi>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}

08001daa <_ZN5Snake5nextYEv>:
	float nextY(){return next(snk[0].py, dy, Map::maxY());}
 8001daa:	b5b0      	push	{r4, r5, r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3348      	adds	r3, #72	; 0x48
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fc56 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f103 0410 	add.w	r4, r3, #16
 8001dc4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f7fe fe46 	bl	8000a5c <__aeabi_d2f>
 8001dd0:	4605      	mov	r5, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f103 0420 	add.w	r4, r3, #32
 8001dd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4621      	mov	r1, r4
 8001de0:	f7fe fe3c 	bl	8000a5c <__aeabi_d2f>
 8001de4:	4604      	mov	r4, r0
 8001de6:	f7ff fe00 	bl	80019ea <_ZN3Map4maxYEv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4622      	mov	r2, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fb7e 	bl	80024f2 <_ZN5Snake4nextEffi>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}

08001e00 <_ZN6EntityC1ERKS_>:
class Entity {
 8001e00:	b490      	push	{r4, r7}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <_ZN6EntityC1ERKS_+0x3c>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f103 0408 	add.w	r4, r3, #8
 8001e16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f103 0410 	add.w	r4, r3, #16
 8001e26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc90      	pop	{r4, r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	08008ee8 	.word	0x08008ee8

08001e40 <_ZN4nodeC1ERKS_>:
class node :public Entity{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffd5 	bl	8001e00 <_ZN6EntityC1ERKS_>
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <_ZN4nodeC1ERKS_+0x38>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f103 0218 	add.w	r2, r3, #24
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3318      	adds	r3, #24
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f006 fd96 	bl	800899a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	08008f3c 	.word	0x08008f3c

08001e7c <_ZN5SnakeC1Ev>:
 *      Author: nicolas-kruger
 */

#include "Snake.h"

Snake::Snake() :Entity(){
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b0e1      	sub	sp, #388	; 0x184
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	6018      	str	r0, [r3, #0]
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fd4e 	bl	800192c <_ZN6EntityC1Ev>
 8001e90:	4a65      	ldr	r2, [pc, #404]	; (8002028 <_ZN5SnakeC1Ev+0x1ac>)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	4c62      	ldr	r4, [pc, #392]	; (800202c <_ZN5SnakeC1Ev+0x1b0>)
 8001ea2:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	f04f 0400 	mov.w	r4, #0
 8001eb2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	333c      	adds	r3, #60	; 0x3c
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fbde 	bl	800268e <_ZNSt6vectorI4nodeSaIS0_EEC1Ev>
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3348      	adds	r3, #72	; 0x48
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fbd8 	bl	800268e <_ZNSt6vectorI4nodeSaIS0_EEC1Ev>
	dir = {
			node(0,-1),
			node(1,0),
			node(0,1),
			node(-1,0),
	};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
	dir = {
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fea5 	bl	8001c40 <_ZN4nodeC1Eii>
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	3330      	adds	r3, #48	; 0x30
 8001efc:	2200      	movs	r2, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fe9d 	bl	8001c40 <_ZN4nodeC1Eii>
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	3360      	adds	r3, #96	; 0x60
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe95 	bl	8001c40 <_ZN4nodeC1Eii>
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	3390      	adds	r3, #144	; 0x90
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe8c 	bl	8001c40 <_ZN4nodeC1Eii>
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	f107 0210 	add.w	r2, r7, #16
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	2204      	movs	r2, #4
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f42:	4620      	mov	r0, r4
 8001f44:	f000 fbeb 	bl	800271e <_ZNSt6vectorI4nodeSaIS0_EEaSESt16initializer_listIS0_E>
 8001f48:	f107 0410 	add.w	r4, r7, #16
 8001f4c:	34c0      	adds	r4, #192	; 0xc0
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	429c      	cmp	r4, r3
 8001f54:	d006      	beq.n	8001f64 <_ZN5SnakeC1Ev+0xe8>
 8001f56:	3c30      	subs	r4, #48	; 0x30
	};
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	330c      	adds	r3, #12
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4798      	blx	r3
	dir = {
 8001f62:	e7f4      	b.n	8001f4e <_ZN5SnakeC1Ev+0xd2>

	snk.push_back(node("@"));
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001f6c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 fc8c 	bl	800888e <_ZNSaIcEC1Ev>
 8001f76:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001f7a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f7e:	492c      	ldr	r1, [pc, #176]	; (8002030 <_ZN5SnakeC1Ev+0x1b4>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f006 fd3d 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f86:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001f8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fe25 	bl	8001be0 <_ZN4nodeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001f96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f000 fbe3 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 8001fa2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fdc8 	bl	8003b3c <_ZN4nodeD1Ev>
 8001fac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f006 fce4 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001fb6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f006 fc68 	bl	8008890 <_ZNSaIcED1Ev>
	snk.push_back(node(0,1));
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001fc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe35 	bl	8001c40 <_ZN4nodeC1Eii>
 8001fd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f000 fbc3 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 8001fe2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fda8 	bl	8003b3c <_ZN4nodeD1Ev>
	snk.push_back(node(0,2));
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001ff4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fe1f 	bl	8001c40 <_ZN4nodeC1Eii>
 8002002:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002006:	4619      	mov	r1, r3
 8002008:	4620      	mov	r0, r4
 800200a:	f000 fbad 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 800200e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fd92 	bl	8003b3c <_ZN4nodeD1Ev>


}
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	08008f20 	.word	0x08008f20
 800202c:	3ff00000 	.word	0x3ff00000
 8002030:	08008df0 	.word	0x08008df0

08002034 <_ZN5SnakeC1EP4FoodPPv>:
Snake::Snake(Food * f,osMutexId * mutex){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0e3      	sub	sp, #396	; 0x18c
 8002038:	af00      	add	r7, sp, #0
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	6018      	str	r0, [r3, #0]
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	6019      	str	r1, [r3, #0]
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fc6b 	bl	800192c <_ZN6EntityC1Ev>
 8002056:	4a72      	ldr	r2, [pc, #456]	; (8002220 <_ZN5SnakeC1EP4FoodPPv+0x1ec>)
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	4c6e      	ldr	r4, [pc, #440]	; (8002224 <_ZN5SnakeC1EP4FoodPPv+0x1f0>)
 800206c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	333c      	adds	r3, #60	; 0x3c
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 faf5 	bl	800268e <_ZNSt6vectorI4nodeSaIS0_EEC1Ev>
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3348      	adds	r3, #72	; 0x48
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 faee 	bl	800268e <_ZNSt6vectorI4nodeSaIS0_EEC1Ev>
	this->mutex = mutex;
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1d3a      	adds	r2, r7, #4
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	619a      	str	r2, [r3, #24]
	this->food=f;
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
	dir = {
				node(0,-1),
				node(1,0),
				node(0,1),
				node(-1,0),
		};
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
	dir = {
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fdad 	bl	8001c40 <_ZN4nodeC1Eii>
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	3330      	adds	r3, #48	; 0x30
 80020ec:	2200      	movs	r2, #0
 80020ee:	2101      	movs	r1, #1
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fda5 	bl	8001c40 <_ZN4nodeC1Eii>
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	3360      	adds	r3, #96	; 0x60
 80020fc:	2201      	movs	r2, #1
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fd9d 	bl	8001c40 <_ZN4nodeC1Eii>
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	3390      	adds	r3, #144	; 0x90
 800210c:	2200      	movs	r2, #0
 800210e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd94 	bl	8001c40 <_ZN4nodeC1Eii>
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	f107 0218 	add.w	r2, r7, #24
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	2204      	movs	r2, #4
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002132:	4620      	mov	r0, r4
 8002134:	f000 faf3 	bl	800271e <_ZNSt6vectorI4nodeSaIS0_EEaSESt16initializer_listIS0_E>
 8002138:	f107 0418 	add.w	r4, r7, #24
 800213c:	34c0      	adds	r4, #192	; 0xc0
 800213e:	f107 0318 	add.w	r3, r7, #24
 8002142:	429c      	cmp	r4, r3
 8002144:	d006      	beq.n	8002154 <_ZN5SnakeC1EP4FoodPPv+0x120>
 8002146:	3c30      	subs	r4, #48	; 0x30
		};
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4620      	mov	r0, r4
 8002150:	4798      	blx	r3
	dir = {
 8002152:	e7f4      	b.n	800213e <_ZN5SnakeC1EP4FoodPPv+0x10a>

		snk.push_back(node("#"));
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800215e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002162:	4618      	mov	r0, r3
 8002164:	f006 fb93 	bl	800888e <_ZNSaIcEC1Ev>
 8002168:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800216c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002170:	492d      	ldr	r1, [pc, #180]	; (8002228 <_ZN5SnakeC1EP4FoodPPv+0x1f4>)
 8002172:	4618      	mov	r0, r3
 8002174:	f006 fc44 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002178:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800217c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fd2c 	bl	8001be0 <_ZN4nodeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002188:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f000 faea 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 8002194:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002198:	4618      	mov	r0, r3
 800219a:	f001 fccf 	bl	8003b3c <_ZN4nodeD1Ev>
 800219e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 fbeb 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021a8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 fb6f 	bl	8008890 <_ZNSaIcED1Ev>
		snk.push_back(node(0,1));
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80021bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021c0:	2201      	movs	r2, #1
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fd3b 	bl	8001c40 <_ZN4nodeC1Eii>
 80021ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021ce:	4619      	mov	r1, r3
 80021d0:	4620      	mov	r0, r4
 80021d2:	f000 fac9 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 80021d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 fcae 	bl	8003b3c <_ZN4nodeD1Ev>
		snk.push_back(node(0,2));
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80021ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021ee:	2202      	movs	r2, #2
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fd24 	bl	8001c40 <_ZN4nodeC1Eii>
 80021f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021fc:	4619      	mov	r1, r3
 80021fe:	4620      	mov	r0, r4
 8002200:	f000 fab2 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 8002204:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fc97 	bl	8003b3c <_ZN4nodeD1Ev>
}
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	bf00      	nop
 8002220:	08008f20 	.word	0x08008f20
 8002224:	3ff00000 	.word	0x3ff00000
 8002228:	08008df4 	.word	0x08008df4

0800222c <_ZN5SnakeD1Ev>:
Snake::~Snake() {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <_ZN5SnakeD1Ev+0x34>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3348      	adds	r3, #72	; 0x48
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fa32 	bl	80026a8 <_ZNSt6vectorI4nodeSaIS0_EED1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	333c      	adds	r3, #60	; 0x3c
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fa2d 	bl	80026a8 <_ZNSt6vectorI4nodeSaIS0_EED1Ev>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fb89 	bl	8001968 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08008f20 	.word	0x08008f20

08002264 <_ZN5SnakeD0Ev>:
Snake::~Snake() {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
}
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ffdd 	bl	800222c <_ZN5SnakeD1Ev>
 8002272:	2158      	movs	r1, #88	; 0x58
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f006 fadc 	bl	8008832 <_ZdlPvj>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_ZN5Snake4tickEv>:
void Snake::tick(){
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if(cont++<Controller::getVel()){
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	1c59      	adds	r1, r3, #1
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6351      	str	r1, [r2, #52]	; 0x34
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f8b4 	bl	8000404 <__aeabi_i2d>
 800229c:	4604      	mov	r4, r0
 800229e:	460d      	mov	r5, r1
 80022a0:	f7ff fd10 	bl	8001cc4 <_ZN10Controller6getVelEv>
 80022a4:	460a      	mov	r2, r1
 80022a6:	4601      	mov	r1, r0
 80022a8:	2301      	movs	r3, #1
 80022aa:	461e      	mov	r6, r3
 80022ac:	4613      	mov	r3, r2
 80022ae:	460a      	mov	r2, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe fb82 	bl	80009bc <__aeabi_dcmplt>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <_ZN5Snake4tickEv+0x3e>
 80022be:	2300      	movs	r3, #0
 80022c0:	461e      	mov	r6, r3
 80022c2:	b2f3      	uxtb	r3, r6
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 80da 	bne.w	800247e <_ZN5Snake4tickEv+0x1fa>
		return;
	}
	cont =0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
	osMutexWait(*mutex, 100);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f817 	bl	800630c <osMutexWait>
	for(int i=snk.size()-1;i>0;i--){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3348      	adds	r3, #72	; 0x48
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fa52 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	dd47      	ble.n	8002384 <_ZN5Snake4tickEv+0x100>

		snk[i].px=(int)snk[i-1].px;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f000 f9b2 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8002306:	4603      	mov	r3, r0
 8002308:	f103 0408 	add.w	r4, r3, #8
 800230c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002310:	4618      	mov	r0, r3
 8002312:	4621      	mov	r1, r4
 8002314:	f7fe fb7a 	bl	8000a0c <__aeabi_d2iz>
 8002318:	4604      	mov	r4, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3348      	adds	r3, #72	; 0x48
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f9a1 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8002328:	4605      	mov	r5, r0
 800232a:	4620      	mov	r0, r4
 800232c:	f7fe f86a 	bl	8000404 <__aeabi_i2d>
 8002330:	4603      	mov	r3, r0
 8002332:	460c      	mov	r4, r1
 8002334:	e9c5 3402 	strd	r3, r4, [r5, #8]
		snk[i].py=(int)snk[i-1].py;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3b01      	subs	r3, #1
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f000 f990 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 800234a:	4603      	mov	r3, r0
 800234c:	f103 0410 	add.w	r4, r3, #16
 8002350:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	f7fe fb58 	bl	8000a0c <__aeabi_d2iz>
 800235c:	4604      	mov	r4, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3348      	adds	r3, #72	; 0x48
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f97f 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 800236c:	4605      	mov	r5, r0
 800236e:	4620      	mov	r0, r4
 8002370:	f7fe f848 	bl	8000404 <__aeabi_i2d>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	e9c5 3404 	strd	r3, r4, [r5, #16]
	for(int i=snk.size()-1;i>0;i--){
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e7b4      	b.n	80022ee <_ZN5Snake4tickEv+0x6a>
	}
	osMutexRelease(*mutex);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f80c 	bl	80063a8 <osMutexRelease>
	int curr = Controller::getDir();
 8002390:	f7fe fdae 	bl	8000ef0 <_ZN10Controller6getDirEv>
 8002394:	60b8      	str	r0, [r7, #8]
//	Display::LCD_Write_String(6,1,to_string(curr));
	if(curr!=-1&&((curr+2)%4)!=currDir){
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239c:	d00f      	beq.n	80023be <_ZN5Snake4tickEv+0x13a>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3302      	adds	r3, #2
 80023a2:	425a      	negs	r2, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	bf58      	it	pl
 80023ae:	4253      	negpl	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d002      	beq.n	80023be <_ZN5Snake4tickEv+0x13a>
		currDir = curr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
	}
	dx = dir[currDir].px;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 f94d 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f103 0408 	add.w	r4, r3, #8
 80023d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	dy = dir[currDir].py;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f000 f93c 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f103 0410 	add.w	r4, r3, #16
 80023f8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	e9c2 3408 	strd	r3, r4, [r2, #32]
	osMutexWait(*mutex, 100);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2164      	movs	r1, #100	; 0x64
 800240a:	4618      	mov	r0, r3
 800240c:	f003 ff7e 	bl	800630c <osMutexWait>
	snk[0].px = nextX();
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fc9f 	bl	8001d54 <_ZN5Snake5nextXEv>
 8002416:	4604      	mov	r4, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3348      	adds	r3, #72	; 0x48
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f923 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8002424:	4605      	mov	r5, r0
 8002426:	4620      	mov	r0, r4
 8002428:	f7fd fffe 	bl	8000428 <__aeabi_f2d>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	e9c5 3402 	strd	r3, r4, [r5, #8]
	snk[0].py = nextY();
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fcb8 	bl	8001daa <_ZN5Snake5nextYEv>
 800243a:	4604      	mov	r4, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3348      	adds	r3, #72	; 0x48
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f911 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 8002448:	4605      	mov	r5, r0
 800244a:	4620      	mov	r0, r4
 800244c:	f7fd ffec 	bl	8000428 <__aeabi_f2d>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	e9c5 3404 	strd	r3, r4, [r5, #16]
	if(autoBite()) resetGame();
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f89f 	bl	800259c <_ZN5Snake8autoBiteEv>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <_ZN5Snake4tickEv+0x1e6>
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f873 	bl	8002550 <_ZN5Snake9resetGameEv>
	eatFood();
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8cd 	bl	800260a <_ZN5Snake7eatFoodEv>
	osMutexRelease(*mutex);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 ff96 	bl	80063a8 <osMutexRelease>
 800247c:	e000      	b.n	8002480 <_ZN5Snake4tickEv+0x1fc>
		return;
 800247e:	bf00      	nop
}
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002486 <_ZN5Snake6renderEv>:
void Snake::render(){
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
	osMutexWait(*mutex, 100);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2164      	movs	r1, #100	; 0x64
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ff38 	bl	800630c <osMutexWait>
	for(int i=0;i<snk.size();i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3348      	adds	r3, #72	; 0x48
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f971 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	bf8c      	ite	hi
 80024b2:	2301      	movhi	r3, #1
 80024b4:	2300      	movls	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <_ZN5Snake6renderEv+0x58>
		snk[i].render();
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3348      	adds	r3, #72	; 0x48
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f8d0 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4610      	mov	r0, r2
 80024d4:	4798      	blx	r3
	for(int i=0;i<snk.size();i++){
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e7e0      	b.n	80024a0 <_ZN5Snake6renderEv+0x1a>
	}
	osMutexRelease(*mutex);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 ff5f 	bl	80063a8 <osMutexRelease>
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZN5Snake4nextEffi>:
float Snake::next(float cur,float dc,int max){
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
	cur+=dc;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f7fe fb00 	bl	8000b08 <__addsf3>
 8002508:	4603      	mov	r3, r0
 800250a:	60bb      	str	r3, [r7, #8]
	if(cur<0) cur= max-1;
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	f7fe fc4f 	bl	8000db4 <__aeabi_fcmplt>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <_ZN5Snake4nextEffi+0x38>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fba5 	bl	8000c70 <__aeabi_i2f>
 8002526:	4603      	mov	r3, r0
 8002528:	60bb      	str	r3, [r7, #8]
	if(cur>=max) cur= 0;
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f7fe fba0 	bl	8000c70 <__aeabi_i2f>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	f7fe fc51 	bl	8000ddc <__aeabi_fcmpge>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <_ZN5Snake4nextEffi+0x54>
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
	return cur;
 8002546:	68bb      	ldr	r3, [r7, #8]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_ZN5Snake9resetGameEv>:
void Snake::resetGame(){
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b099      	sub	sp, #100	; 0x64
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	this->snk=Snake().snk;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fc8a 	bl	8001e7c <_ZN5SnakeC1Ev>
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	3348      	adds	r3, #72	; 0x48
 800256e:	4619      	mov	r1, r3
 8002570:	4620      	mov	r0, r4
 8002572:	f000 f92b 	bl	80027cc <_ZNSt6vectorI4nodeSaIS0_EEaSEOS2_>
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fe56 	bl	800222c <_ZN5SnakeD1Ev>
	this->currDir =1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
	Display::LCD_Write_String(6, 2, "fim de jogo");
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <_ZN5Snake9resetGameEv+0x48>)
 8002588:	2102      	movs	r1, #2
 800258a:	2006      	movs	r0, #6
 800258c:	f7ff f91c 	bl	80017c8 <_ZN7Display16LCD_Write_StringEhhPKc>
}
 8002590:	bf00      	nop
 8002592:	3764      	adds	r7, #100	; 0x64
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	08008df8 	.word	0x08008df8

0800259c <_ZN5Snake8autoBiteEv>:
bool Snake::autoBite(){
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	for(int i =1;i<snk.size();i++){
 80025a4:	2301      	movs	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3348      	adds	r3, #72	; 0x48
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f8ed 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	bf8c      	ite	hi
 80025ba:	2301      	movhi	r3, #1
 80025bc:	2300      	movls	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01d      	beq.n	8002600 <_ZN5Snake8autoBiteEv+0x64>
		if(snk[0].colidin(&snk[i])) return true;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3348      	adds	r3, #72	; 0x48
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f84d 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461d      	mov	r5, r3
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	681c      	ldr	r4, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3348      	adds	r3, #72	; 0x48
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f842 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4628      	mov	r0, r5
 80025ec:	47a0      	blx	r4
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <_ZN5Snake8autoBiteEv+0x5c>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e004      	b.n	8002602 <_ZN5Snake8autoBiteEv+0x66>
	for(int i =1;i<snk.size();i++){
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e7d3      	b.n	80025a8 <_ZN5Snake8autoBiteEv+0xc>
	}
	return false;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bdb0      	pop	{r4, r5, r7, pc}

0800260a <_ZN5Snake7eatFoodEv>:
void Snake::eatFood(){
 800260a:	b590      	push	{r4, r7, lr}
 800260c:	b08f      	sub	sp, #60	; 0x3c
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	if(snk[0].colidin(food)){
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3348      	adds	r3, #72	; 0x48
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f826 	bl	800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>
 800261e:	4603      	mov	r3, r0
 8002620:	4618      	mov	r0, r3
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800262a:	4611      	mov	r1, r2
 800262c:	4798      	blx	r3
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d016      	beq.n	8002662 <_ZN5Snake7eatFoodEv+0x58>
		snk.push_back(node());
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4618      	mov	r0, r3
 8002640:	f001 fa54 	bl	8003aec <_ZN4nodeC1Ev>
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4619      	mov	r1, r3
 800264a:	4620      	mov	r0, r4
 800264c:	f000 f88c 	bl	8002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fa71 	bl	8003b3c <_ZN4nodeD1Ev>
		food->eated= true;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	2201      	movs	r2, #1
 8002660:	771a      	strb	r2, [r3, #28]
	}

}
 8002662:	bf00      	nop
 8002664:	373c      	adds	r7, #60	; 0x3c
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}

0800266a <_ZNSt6vectorI4nodeSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	440b      	add	r3, r1
      }
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_ZNSt6vectorI4nodeSaIS0_EEC1Ev>:
      vector()
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f8b8 	bl	800280e <_ZNSt12_Vector_baseI4nodeSaIS0_EEC1Ev>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZNSt6vectorI4nodeSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681c      	ldr	r4, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f8d4 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 80026c0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80026c2:	461a      	mov	r2, r3
 80026c4:	4629      	mov	r1, r5
 80026c6:	4620      	mov	r0, r4
 80026c8:	f000 f8d8 	bl	800287c <_ZSt8_DestroyIP4nodeS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8aa 	bl	8002828 <_ZNSt12_Vector_baseI4nodeSaIS0_EED1Ev>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}

080026de <_ZNKSt16initializer_listI4nodeE5beginEv>:
      begin() const noexcept { return _M_array; }
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <_ZNKSt16initializer_listI4nodeE3endEv>:
      end() const noexcept { return begin() + size(); }
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ffee 	bl	80026de <_ZNKSt16initializer_listI4nodeE5beginEv>
 8002702:	4604      	mov	r4, r0
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8c7 	bl	8002898 <_ZNKSt16initializer_listI4nodeE4sizeEv>
 800270a:	4602      	mov	r2, r0
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4423      	add	r3, r4
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}

0800271e <_ZNSt6vectorI4nodeSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 800271e:	b5b0      	push	{r4, r5, r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ffd5 	bl	80026de <_ZNKSt16initializer_listI4nodeE5beginEv>
 8002734:	4604      	mov	r4, r0
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ffdb 	bl	80026f4 <_ZNKSt16initializer_listI4nodeE3endEv>
 800273e:	4602      	mov	r2, r0
 8002740:	462b      	mov	r3, r5
 8002742:	4621      	mov	r1, r4
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f8b3 	bl	80028b0 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 800274a:	68fb      	ldr	r3, [r7, #12]
      }
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bdb0      	pop	{r4, r5, r7, pc}

08002754 <_ZSt4moveIR4nodeEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <_ZNSt6vectorI4nodeSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002772:	6838      	ldr	r0, [r7, #0]
 8002774:	f7ff ffee 	bl	8002754 <_ZSt4moveIR4nodeEONSt16remove_referenceIT_E4typeEOS3_>
 8002778:	4603      	mov	r3, r0
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f933 	bl	80029e8 <_ZNSt6vectorI4nodeSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	111b      	asrs	r3, r3, #4
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv+0x28>)
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	aaaaaaab 	.word	0xaaaaaaab

080027b8 <_ZSt4moveIRSt6vectorI4nodeSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <_ZNSt6vectorI4nodeSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f7ff ffec 	bl	80027b8 <_ZSt4moveIRSt6vectorI4nodeSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4622      	mov	r2, r4
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f92d 	bl	8002a46 <_ZNSt6vectorI4nodeSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 80027ec:	687b      	ldr	r3, [r7, #4]
      }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}

080027f6 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f974 	bl	8002aec <_ZNSaI4nodeED1Ev>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZNSt12_Vector_baseI4nodeSaIS0_EEC1Ev>:
      _Vector_base()
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f952 	bl	8002ac2 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implC1Ev>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_ZNSt12_Vector_baseI4nodeSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	111b      	asrs	r3, r3, #4
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <_ZNSt12_Vector_baseI4nodeSaIS0_EED1Ev+0x3c>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002848:	461a      	mov	r2, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f95a 	bl	8002b04 <_ZNSt12_Vector_baseI4nodeSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ffcf 	bl	80027f6 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implD1Ev>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	aaaaaaab 	.word	0xaaaaaaab

08002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_ZSt8_DestroyIP4nodeS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f94d 	bl	8002b2a <_ZSt8_DestroyIP4nodeEvT_S2_>
    }
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_ZNKSt16initializer_listI4nodeE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68b8      	ldr	r0, [r7, #8]
 80028c2:	f000 f948 	bl	8002b56 <_ZSt8distanceIPK4nodeENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80028c6:	4603      	mov	r3, r0
 80028c8:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f958 	bl	8002b80 <_ZNKSt6vectorI4nodeSaIS0_EE8capacityEv>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4293      	cmp	r3, r2
 80028d6:	bf8c      	ite	hi
 80028d8:	2301      	movhi	r3, #1
 80028da:	2300      	movls	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d036      	beq.n	8002950 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xa0>
	  {
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	69f9      	ldr	r1, [r7, #28]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f95f 	bl	8002bac <_ZNSt6vectorI4nodeSaIS0_EE20_M_allocate_and_copyIPKS0_EEPS0_jT_S7_>
 80028ee:	61b8      	str	r0, [r7, #24]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681c      	ldr	r4, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ffb4 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002900:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002902:	461a      	mov	r2, r3
 8002904:	4629      	mov	r1, r5
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff ffb8 	bl	800287c <_ZSt8_DestroyIP4nodeS0_EvT_S2_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
			  - this->_M_impl._M_start);
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	111b      	asrs	r3, r3, #4
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x120>)
 8002922:	fb02 f303 	mul.w	r3, r2, r3
	    _M_deallocate(this->_M_impl._M_start,
 8002926:	461a      	mov	r2, r3
 8002928:	f000 f8ec 	bl	8002b04 <_ZNSt12_Vector_baseI4nodeSaIS0_EE13_M_deallocateEPS0_j>
	    this->_M_impl._M_start = __tmp;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	18ca      	adds	r2, r1, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	609a      	str	r2, [r3, #8]
	    this->_M_impl._M_finish =
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	  }
      }
 800294e:	e03b      	b.n	80029c8 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x118>
	else if (size() >= __len)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff1b 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 8002956:	4602      	mov	r2, r0
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4293      	cmp	r3, r2
 800295c:	bf94      	ite	ls
 800295e:	2301      	movls	r3, #1
 8002960:	2300      	movhi	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xd2>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68b8      	ldr	r0, [r7, #8]
 8002972:	f000 f94f 	bl	8002c14 <_ZSt4copyIPK4nodePS0_ET0_T_S5_S4_>
 8002976:	4603      	mov	r3, r0
 8002978:	4619      	mov	r1, r3
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f932 	bl	8002be4 <_ZNSt6vectorI4nodeSaIS0_EE15_M_erase_at_endEPS0_>
      }
 8002980:	e022      	b.n	80029c8 <_ZNSt6vectorI4nodeSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x118>
	    _ForwardIterator __mid = __first;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	617b      	str	r3, [r7, #20]
	    std::advance(__mid, size());
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff00 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 800298c:	4602      	mov	r2, r0
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f955 	bl	8002c44 <_ZSt7advanceIPK4nodejEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	f000 f936 	bl	8002c14 <_ZSt4copyIPK4nodePS0_ET0_T_S5_S4_>
	      std::__uninitialized_copy_a(__mid, __last,
 80029a8:	697c      	ldr	r4, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff59 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 80029b6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 80029b8:	462a      	mov	r2, r5
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4620      	mov	r0, r4
 80029be:	f000 f954 	bl	8002c6a <_ZSt22__uninitialized_copy_aIPK4nodePS0_S0_ET0_T_S5_S4_RSaIT1_E>
 80029c2:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
      }
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	aaaaaaab 	.word	0xaaaaaaab

080029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <_ZNSt6vectorI4nodeSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d012      	beq.n	8002a24 <_ZNSt6vectorI4nodeSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80029fe:	687c      	ldr	r4, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685d      	ldr	r5, [r3, #4]
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7ff ffe5 	bl	80029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4620      	mov	r0, r4
 8002a12:	f000 f93b 	bl	8002c8c <_ZNSt16allocator_traitsISaI4nodeEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]
      }
 8002a22:	e00c      	b.n	8002a3e <_ZNSt6vectorI4nodeSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f944 	bl	8002cb2 <_ZNSt6vectorI4nodeSaIS0_EE3endEv>
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f7ff ffd1 	bl	80029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	4621      	mov	r1, r4
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f94b 	bl	8002cd4 <_ZNSt6vectorI4nodeSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bdb0      	pop	{r4, r5, r7, pc}

08002a46 <_ZNSt6vectorI4nodeSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 8002a46:	b590      	push	{r4, r7, lr}
 8002a48:	b089      	sub	sp, #36	; 0x24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f9d2 	bl	8002e04 <_ZNKSt12_Vector_baseI4nodeSaIS0_EE13get_allocatorEv>
 8002a60:	f107 021c 	add.w	r2, r7, #28
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9db 	bl	8002e26 <_ZNSt6vectorI4nodeSaIS0_EEC1ERKS1_>
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f839 	bl	8002aec <_ZNSaI4nodeED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f107 0210 	add.w	r2, r7, #16
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f9de 	bl	8002e44 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f9d8 	bl	8002e44 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fee6 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fee1 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f9ea 	bl	8002e84 <_ZSt15__alloc_on_moveISaI4nodeEEvRT_S3_>
	vector __tmp(get_allocator());
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fdf7 	bl	80026a8 <_ZNSt6vectorI4nodeSaIS0_EED1Ev>
      }
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}

08002ac2 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f9e8 	bl	8002ea0 <_ZNSaI4nodeEC1Ev>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
	{ }
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZNSaI4nodeED1Ev>:
      ~allocator() throw() { }
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f9df 	bl	8002eb8 <_ZN9__gnu_cxx13new_allocatorI4nodeED1Ev>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZNSt12_Vector_baseI4nodeSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <_ZNSt12_Vector_baseI4nodeSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f9d5 	bl	8002ecc <_ZNSt16allocator_traitsISaI4nodeEE10deallocateERS1_PS0_j>
      }
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_ZSt8_DestroyIP4nodeEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9e1 	bl	8002efe <_ZNSt12_Destroy_auxILb0EE9__destroyIP4nodeEEvT_S4_>
    }
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZSt19__iterator_categoryIPK4nodeENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <_ZSt8distanceIPK4nodeENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002b56:	b5b0      	push	{r4, r5, r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002b60:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ffed 	bl	8002b44 <_ZSt19__iterator_categoryIPK4nodeENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8002b6a:	462a      	mov	r2, r5
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f000 f9de 	bl	8002f30 <_ZSt10__distanceIPK4nodeENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8002b74:	4603      	mov	r3, r0
    }
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b80 <_ZNKSt6vectorI4nodeSaIS0_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	111b      	asrs	r3, r3, #4
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <_ZNKSt6vectorI4nodeSaIS0_EE8capacityEv+0x28>)
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab

08002bac <_ZNSt6vectorI4nodeSaIS0_EE20_M_allocate_and_copyIPKS0_EEPS0_jT_S7_>:
	_M_allocate_and_copy(size_type __n,
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f9ca 	bl	8002f58 <_ZNSt12_Vector_baseI4nodeSaIS0_EE11_M_allocateEj>
 8002bc4:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe4d 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bce:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f848 	bl	8002c6a <_ZSt22__uninitialized_copy_aIPK4nodePS0_S0_ET0_T_S5_S4_RSaIT1_E>
	      return __result;
 8002bda:	697b      	ldr	r3, [r7, #20]
	}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt6vectorI4nodeSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685c      	ldr	r4, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe37 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4621      	mov	r1, r4
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f7ff fe3b 	bl	800287c <_ZSt8_DestroyIP4nodeS0_EvT_S2_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
      }
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}

08002c14 <_ZSt4copyIPK4nodePS0_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f9ad 	bl	8002f80 <_ZSt12__miter_baseIPK4nodeET_S3_>
 8002c26:	4604      	mov	r4, r0
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f000 f9a9 	bl	8002f80 <_ZSt12__miter_baseIPK4nodeET_S3_>
 8002c2e:	4603      	mov	r3, r0
	       __result));
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f000 f9ad 	bl	8002f94 <_ZSt14__copy_move_a2ILb0EPK4nodePS0_ET1_T0_S5_S4_>
 8002c3a:	4603      	mov	r3, r0
    }
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}

08002c44 <_ZSt7advanceIPK4nodejEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff76 	bl	8002b44 <_ZSt19__iterator_categoryIPK4nodeENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8002c58:	4622      	mov	r2, r4
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f9b5 	bl	8002fcc <_ZSt9__advanceIPK4nodeiEvRT_T0_St26random_access_iterator_tag>
    }
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}

08002c6a <_ZSt22__uninitialized_copy_aIPK4nodePS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f9ba 	bl	8002ff6 <_ZSt18uninitialized_copyIPK4nodePS0_ET0_T_S5_S4_>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZNSt16allocator_traitsISaI4nodeEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fe9b 	bl	80029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f9b8 	bl	800301a <_ZN9__gnu_cxx13new_allocatorI4nodeE9constructIS1_JS1_EEEvPT_DpOT0_>
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_ZNSt6vectorI4nodeSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	1d1a      	adds	r2, r3, #4
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f9c2 	bl	800304e <_ZN9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZNSt6vectorI4nodeSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <_ZNSt6vectorI4nodeSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f9c1 	bl	800306c <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fa05 	bl	80030fc <_ZNSt6vectorI4nodeSaIS0_EE5beginEv>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	f107 0214 	add.w	r2, r7, #20
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa0b 	bl	800311c <_ZN9__gnu_cxxmiIP4nodeSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002d06:	4603      	mov	r3, r0
 8002d08:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f922 	bl	8002f58 <_ZNSt12_Vector_baseI4nodeSaIS0_EE11_M_allocateEj>
 8002d14:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002d1a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	189d      	adds	r5, r3, r2
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fe51 	bl	80029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4629      	mov	r1, r5
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff ffa7 	bl	8002c8c <_ZNSt16allocator_traitsISaI4nodeEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681c      	ldr	r4, [r3, #0]
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fa02 	bl	8003154 <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>
 8002d50:	4603      	mov	r3, r0
 8002d52:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fd86 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d5c:	4603      	mov	r3, r0
	  __new_finish
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	4629      	mov	r1, r5
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fa00 	bl	8003168 <_ZSt34__uninitialized_move_if_noexcept_aIP4nodeS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002d68:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	3330      	adds	r3, #48	; 0x30
 8002d6e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f9ed 	bl	8003154 <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	681c      	ldr	r4, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fd6f 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d8a:	4603      	mov	r3, r0
	  __new_finish
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 f9e9 	bl	8003168 <_ZSt34__uninitialized_move_if_noexcept_aIP4nodeS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002d96:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd60 	bl	8002868 <_ZNSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002da8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002daa:	461a      	mov	r2, r3
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7ff fd64 	bl	800287c <_ZSt8_DestroyIP4nodeS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	111b      	asrs	r3, r3, #4
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <_ZNSt6vectorI4nodeSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff fe98 	bl	8002b04 <_ZNSt12_Vector_baseI4nodeSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	461a      	mov	r2, r3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]
    }
 8002df4:	bf00      	nop
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfc:	08008e04 	.word	0x08008e04
 8002e00:	aaaaaaab 	.word	0xaaaaaaab

08002e04 <_ZNKSt12_Vector_baseI4nodeSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f000 f9c3 	bl	800319a <_ZNKSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f9c8 	bl	80031ae <_ZNSaI4nodeEC1ERKS0_>
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZNSt6vectorI4nodeSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6839      	ldr	r1, [r7, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f9c8 	bl	80031ca <_ZNSt12_Vector_baseI4nodeSaIS0_EEC1ERKS1_>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f9d1 	bl	80031fc <_ZSt4swapIP4nodeENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	  std::swap(_M_finish, __x._M_finish);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	1d1a      	adds	r2, r3, #4
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3304      	adds	r3, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f000 f9c9 	bl	80031fc <_ZSt4swapIP4nodeENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f103 0208 	add.w	r2, r3, #8
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 f9c0 	bl	80031fc <_ZSt4swapIP4nodeENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_ZSt15__alloc_on_moveISaI4nodeEEvRT_S3_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9db 	bl	800324e <_ZSt18__do_alloc_on_moveISaI4nodeEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZNSaI4nodeEC1Ev>:
      allocator() throw() { }
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9dd 	bl	8003268 <_ZN9__gnu_cxx13new_allocatorI4nodeEC1Ev>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_ZN9__gnu_cxx13new_allocatorI4nodeED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <_ZNSt16allocator_traitsISaI4nodeEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9cd 	bl	800327c <_ZN9__gnu_cxx13new_allocatorI4nodeE10deallocateEPS1_j>
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZSt11__addressofI4nodeEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <_ZNSt12_Destroy_auxILb0EE9__destroyIP4nodeEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d00a      	beq.n	8002f26 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4nodeEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ffea 	bl	8002eea <_ZSt11__addressofI4nodeEPT_RS1_>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f9bc 	bl	8003296 <_ZSt8_DestroyI4nodeEvPT_>
	  for (; __first != __last; ++__first)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	e7f0      	b.n	8002f08 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4nodeEEvT_S4_+0xa>
	}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <_ZSt10__distanceIPK4nodeENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	111b      	asrs	r3, r3, #4
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <_ZSt10__distanceIPK4nodeENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x24>)
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
    }
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	aaaaaaab 	.word	0xaaaaaaab

08002f58 <_ZNSt12_Vector_baseI4nodeSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <_ZNSt12_Vector_baseI4nodeSaIS0_EE11_M_allocateEj+0x1e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f9a0 	bl	80032b2 <_ZNSt16allocator_traitsISaI4nodeEE8allocateERS1_j>
 8002f72:	4603      	mov	r3, r0
 8002f74:	e000      	b.n	8002f78 <_ZNSt12_Vector_baseI4nodeSaIS0_EE11_M_allocateEj+0x20>
 8002f76:	2300      	movs	r3, #0
      }
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZSt12__miter_baseIPK4nodeET_S3_>:
    __miter_base(_Iterator __it)
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <_ZSt14__copy_move_a2ILb0EPK4nodePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f995 	bl	80032d0 <_ZSt12__niter_baseIPK4nodeET_S3_>
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	68b8      	ldr	r0, [r7, #8]
 8002faa:	f000 f991 	bl	80032d0 <_ZSt12__niter_baseIPK4nodeET_S3_>
 8002fae:	4605      	mov	r5, r0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f997 	bl	80032e4 <_ZSt12__niter_baseIP4nodeET_S2_>
 8002fb6:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4629      	mov	r1, r5
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 f99b 	bl	80032f8 <_ZSt13__copy_move_aILb0EPK4nodePS0_ET1_T0_S5_S4_>
 8002fc2:	4603      	mov	r3, r0
    }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}

08002fcc <_ZSt9__advanceIPK4nodeiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	18ca      	adds	r2, r1, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]
    }
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <_ZSt18uninitialized_copyIPK4nodePS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f986 	bl	800331c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4nodePS2_EET0_T_S7_S6_>
 8003010:	4603      	mov	r3, r0
    }
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZN9__gnu_cxx13new_allocatorI4nodeE9constructIS1_JS1_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800301a:	b590      	push	{r4, r7, lr}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fcd4 	bl	80029d4 <_ZSt7forwardI4nodeEOT_RNSt16remove_referenceIS1_E4typeE>
 800302c:	4604      	mov	r4, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4619      	mov	r1, r3
 8003032:	2030      	movs	r0, #48	; 0x30
 8003034:	f7fe fdc8 	bl	8001bc8 <_ZnwjPv>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <_ZN9__gnu_cxx13new_allocatorI4nodeE9constructIS1_JS1_EEEvPT_DpOT0_+0x2c>
 800303e:	4621      	mov	r1, r4
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fefd 	bl	8001e40 <_ZN4nodeC1ERKS_>
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}

0800304e <_ZN9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f96f 	bl	800335c <_ZNKSt6vectorI4nodeSaIS0_EE8max_sizeEv>
 800307e:	4604      	mov	r4, r0
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fb83 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 8003086:	4603      	mov	r3, r0
 8003088:	1ae2      	subs	r2, r4, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	bf34      	ite	cc
 8003090:	2301      	movcc	r3, #1
 8003092:	2300      	movcs	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f005 fbfe 	bl	800889e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fb72 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80030a8:	4604      	mov	r4, r0
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff fb6e 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80030b0:	4603      	mov	r3, r0
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	f107 0208 	add.w	r2, r7, #8
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f95d 	bl	800337e <_ZSt3maxIjERKT_S2_S2_>
 80030c4:	4603      	mov	r3, r0
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4423      	add	r3, r4
 80030ca:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fb5d 	bl	800278c <_ZNKSt6vectorI4nodeSaIS0_EE4sizeEv>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d306      	bcc.n	80030e8 <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc+0x7c>
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f93e 	bl	800335c <_ZNKSt6vectorI4nodeSaIS0_EE8max_sizeEv>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d904      	bls.n	80030f2 <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc+0x86>
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f937 	bl	800335c <_ZNKSt6vectorI4nodeSaIS0_EE8max_sizeEv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	e000      	b.n	80030f4 <_ZNKSt6vectorI4nodeSaIS0_EE12_M_check_lenEjPKc+0x88>
 80030f2:	697b      	ldr	r3, [r7, #20]
      }
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}

080030fc <_ZNSt6vectorI4nodeSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff9e 	bl	800304e <_ZN9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_ZN9__gnu_cxxmiIP4nodeSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f814 	bl	8003154 <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>
 800312c:	4603      	mov	r3, r0
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461c      	mov	r4, r3
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f000 f80e 	bl	8003154 <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>
 8003138:	4603      	mov	r3, r0
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1ae3      	subs	r3, r4, r3
 800313e:	111b      	asrs	r3, r3, #4
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <_ZN9__gnu_cxxmiIP4nodeSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	bf00      	nop
 8003150:	aaaaaaab 	.word	0xaaaaaaab

08003154 <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <_ZSt34__uninitialized_move_if_noexcept_aIP4nodeS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f914 	bl	80033a4 <_ZSt32__make_move_if_noexcept_iteratorI4nodePKS0_ET0_PT_>
 800317c:	4604      	mov	r4, r0
 800317e:	68b8      	ldr	r0, [r7, #8]
 8003180:	f000 f910 	bl	80033a4 <_ZSt32__make_move_if_noexcept_iteratorI4nodePKS0_ET0_PT_>
 8003184:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4620      	mov	r0, r4
 800318c:	f7ff fd6d 	bl	8002c6a <_ZSt22__uninitialized_copy_aIPK4nodePS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8003190:	4603      	mov	r3, r0
    }
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <_ZNKSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <_ZNSaI4nodeEC1ERKS0_>:
      allocator(const allocator& __a) throw()
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8fc 	bl	80033b8 <_ZN9__gnu_cxx13new_allocatorI4nodeEC1ERKS2_>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_ZNSt12_Vector_baseI4nodeSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f8f8 	bl	80033ce <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implC1ERKS1_>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZSt4moveIRP4nodeEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <_ZSt4swapIP4nodeENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffee 	bl	80031e8 <_ZSt4moveIRP4nodeEONSt16remove_referenceIT_E4typeEOS4_>
 800320c:	4603      	mov	r3, r0
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	f7ff ffe8 	bl	80031e8 <_ZSt4moveIRP4nodeEONSt16remove_referenceIT_E4typeEOS4_>
 8003218:	4603      	mov	r3, r0
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ffdf 	bl	80031e8 <_ZSt4moveIRP4nodeEONSt16remove_referenceIT_E4typeEOS4_>
 800322a:	4603      	mov	r3, r0
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
    }
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <_ZSt4moveIRSaI4nodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <_ZSt18__do_alloc_on_moveISaI4nodeEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f7ff ffed 	bl	800323a <_ZSt4moveIRSaI4nodeEEONSt16remove_referenceIT_E4typeEOS4_>
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZN9__gnu_cxx13new_allocatorI4nodeEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <_ZN9__gnu_cxx13new_allocatorI4nodeE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003288:	68b8      	ldr	r0, [r7, #8]
 800328a:	f005 faed 	bl	8008868 <_ZdlPv>
      }
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_ZSt8_DestroyI4nodeEvPT_>:
    _Destroy(_Tp* __pointer)
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZNSt16allocator_traitsISaI4nodeEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80032bc:	2200      	movs	r2, #0
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f89b 	bl	80033fc <_ZN9__gnu_cxx13new_allocatorI4nodeE8allocateEjPKv>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZSt12__niter_baseIPK4nodeET_S3_>:
    __niter_base(_Iterator __it)
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <_ZSt12__niter_baseIP4nodeET_S2_>:
    __niter_base(_Iterator __it)
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <_ZSt13__copy_move_aILb0EPK4nodePS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f8cb 	bl	80034a8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4nodePS3_EET0_T_S8_S7_>
 8003312:	4603      	mov	r3, r0
    }
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4nodePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d00e      	beq.n	8003352 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4nodePS2_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003334:	6978      	ldr	r0, [r7, #20]
 8003336:	f7ff fdd8 	bl	8002eea <_ZSt11__addressofI4nodeEPT_RS1_>
 800333a:	4603      	mov	r3, r0
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8e2 	bl	8003508 <_ZSt10_ConstructI4nodeJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3330      	adds	r3, #48	; 0x30
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3330      	adds	r3, #48	; 0x30
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e7ec      	b.n	800332c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4nodePS2_EET0_T_S7_S6_+0x10>
	      return __cur;
 8003352:	697b      	ldr	r3, [r7, #20]
	}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZNKSt6vectorI4nodeSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff17 	bl	800319a <_ZNKSt12_Vector_baseI4nodeSaIS0_EE19_M_get_Tp_allocatorEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f8e3 	bl	800353a <_ZNSt16allocator_traitsISaI4nodeEE8max_sizeERKS1_>
 8003374:	4603      	mov	r3, r0
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d201      	bcs.n	8003398 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	e000      	b.n	800339a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003398:	687b      	ldr	r3, [r7, #4]
    }
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <_ZSt32__make_move_if_noexcept_iteratorI4nodePKS0_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <_ZN9__gnu_cxx13new_allocatorI4nodeEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <_ZNSt12_Vector_baseI4nodeSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff fee7 	bl	80031ae <_ZNSaI4nodeEC1ERKS0_>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
	{ }
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN9__gnu_cxx13new_allocatorI4nodeE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8a3 	bl	8003554 <_ZNK9__gnu_cxx13new_allocatorI4nodeE8max_sizeEv>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4293      	cmp	r3, r2
 8003414:	bf8c      	ite	hi
 8003416:	2301      	movhi	r3, #1
 8003418:	2300      	movls	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <_ZN9__gnu_cxx13new_allocatorI4nodeE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003420:	f005 fa37 	bl	8008892 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f005 fa01 	bl	8008836 <_Znwj>
 8003434:	4603      	mov	r3, r0
      }
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN6EntityaSERKS_>:
 800343e:	b490      	push	{r4, r7}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f103 0408 	add.w	r4, r3, #8
 800344e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f103 0410 	add.w	r4, r3, #16
 800345e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bc90      	pop	{r4, r7}
 8003472:	4770      	bx	lr

08003474 <_ZN4nodeaSERKS_>:
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ffda 	bl	800343e <_ZN6EntityaSERKS_>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 0218 	add.w	r2, r3, #24
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3318      	adds	r3, #24
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f005 fa77 	bl	800898a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4nodePS3_EET0_T_S8_S7_>:
        __copy_m(_II __first, _II __last, _OI __result)
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	111b      	asrs	r3, r3, #4
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4nodePS3_EET0_T_S8_S7_+0x48>)
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dd0d      	ble.n	80034e6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4nodePS3_EET0_T_S8_S7_+0x3e>
	      *__result = *__first;
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffd1 	bl	8003474 <_ZN4nodeaSERKS_>
	      ++__first;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3330      	adds	r3, #48	; 0x30
 80034d6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3330      	adds	r3, #48	; 0x30
 80034dc:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e7ee      	b.n	80034c4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4nodePS3_EET0_T_S8_S7_+0x1c>
	  return __result;
 80034e6:	687b      	ldr	r3, [r7, #4]
	}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	aaaaaaab 	.word	0xaaaaaaab

080034f4 <_ZSt7forwardIRK4nodeEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <_ZSt10_ConstructI4nodeJRKS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8003512:	6838      	ldr	r0, [r7, #0]
 8003514:	f7ff ffee 	bl	80034f4 <_ZSt7forwardIRK4nodeEOT_RNSt16remove_referenceIS3_E4typeE>
 8003518:	4604      	mov	r4, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4619      	mov	r1, r3
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	f7fe fb52 	bl	8001bc8 <_ZnwjPv>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <_ZSt10_ConstructI4nodeJRKS0_EEvPT_DpOT0_+0x2a>
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fc87 	bl	8001e40 <_ZN4nodeC1ERKS_>
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}

0800353a <_ZNSt16allocator_traitsISaI4nodeEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f806 	bl	8003554 <_ZNK9__gnu_cxx13new_allocatorI4nodeE8max_sizeEv>
 8003548:	4603      	mov	r3, r0
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <_ZNK9__gnu_cxx13new_allocatorI4nodeE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800355c:	4b02      	ldr	r3, [pc, #8]	; (8003568 <_ZNK9__gnu_cxx13new_allocatorI4nodeE8max_sizeEv+0x14>)
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	05555555 	.word	0x05555555

0800356c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a06      	ldr	r2, [pc, #24]	; (8003594 <vApplicationGetIdleTaskMemory+0x28>)
 800357c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a05      	ldr	r2, [pc, #20]	; (8003598 <vApplicationGetIdleTaskMemory+0x2c>)
 8003582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	200002d4 	.word	0x200002d4
 8003598:	20000328 	.word	0x20000328

0800359c <_ZN10Controller6setMuxEPPv>:
	static void setMux(osMutexId* m){
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
		mutex = m;
 80035a4:	4a03      	ldr	r2, [pc, #12]	; (80035b4 <_ZN10Controller6setMuxEPPv+0x18>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
	}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	200002c4 	.word	0x200002c4

080035b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b09c      	sub	sp, #112	; 0x70
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Controller::setMux(&mControllerHandle);
 80035be:	4835      	ldr	r0, [pc, #212]	; (8003694 <main+0xdc>)
 80035c0:	f7ff ffec 	bl	800359c <_ZN10Controller6setMuxEPPv>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035c4:	f000 fcd2 	bl	8003f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035c8:	f000 f876 	bl	80036b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035cc:	f000 f95e 	bl	800388c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80035d0:	f000 f920 	bl	8003814 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 80035d4:	f000 f8d6 	bl	8003784 <_ZL12MX_ADC1_Initv>
//  int cont = 0;
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mController */
  osMutexDef(mController);
 80035d8:	2300      	movs	r3, #0
 80035da:	66bb      	str	r3, [r7, #104]	; 0x68
 80035dc:	2300      	movs	r3, #0
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
  mControllerHandle = osMutexCreate(osMutex(mController));
 80035e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035e4:	4618      	mov	r0, r3
 80035e6:	f002 fe78 	bl	80062da <osMutexCreate>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b29      	ldr	r3, [pc, #164]	; (8003694 <main+0xdc>)
 80035ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of mSnake */
  osMutexDef(mSnake);
 80035f0:	2300      	movs	r3, #0
 80035f2:	663b      	str	r3, [r7, #96]	; 0x60
 80035f4:	2300      	movs	r3, #0
 80035f6:	667b      	str	r3, [r7, #100]	; 0x64
  mSnakeHandle = osMutexCreate(osMutex(mSnake));
 80035f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 fe6c 	bl	80062da <osMutexCreate>
 8003602:	4602      	mov	r2, r0
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <main+0xe0>)
 8003606:	601a      	str	r2, [r3, #0]

  /* definition and creation of mFood */
  osMutexDef(mFood);
 8003608:	2300      	movs	r3, #0
 800360a:	65bb      	str	r3, [r7, #88]	; 0x58
 800360c:	2300      	movs	r3, #0
 800360e:	65fb      	str	r3, [r7, #92]	; 0x5c
  mFoodHandle = osMutexCreate(osMutex(mFood));
 8003610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003614:	4618      	mov	r0, r3
 8003616:	f002 fe60 	bl	80062da <osMutexCreate>
 800361a:	4602      	mov	r2, r0
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <main+0xe4>)
 800361e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of renderTask */
  osThreadDef(renderTask, render, osPriorityNormal, 0, 128);
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <main+0xe8>)
 8003622:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003626:	461d      	mov	r5, r3
 8003628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  renderTaskHandle = osThreadCreate(osThread(renderTask), NULL);
 8003634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f002 fded 	bl	800621a <osThreadCreate>
 8003640:	4602      	mov	r2, r0
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <main+0xec>)
 8003644:	601a      	str	r2, [r3, #0]

  /* definition and creation of tickTask */
  osThreadDef(tickTask, tick, osPriorityNormal, 0, 128);
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <main+0xf0>)
 8003648:	f107 0420 	add.w	r4, r7, #32
 800364c:	461d      	mov	r5, r3
 800364e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tickTaskHandle = osThreadCreate(osThread(tickTask), NULL);
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fdda 	bl	800621a <osThreadCreate>
 8003666:	4602      	mov	r2, r0
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <main+0xf4>)
 800366a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ControllerTask */
  osThreadDef(ControllerTask, controller, osPriorityIdle, 0, 128);
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <main+0xf8>)
 800366e:	1d3c      	adds	r4, r7, #4
 8003670:	461d      	mov	r5, r3
 8003672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800367a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(ControllerTask), NULL);
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f002 fdc9 	bl	800621a <osThreadCreate>
 8003688:	4602      	mov	r2, r0
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <main+0xfc>)
 800368c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800368e:	f002 fdbd 	bl	800620c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003692:	e7fe      	b.n	8003692 <main+0xda>
 8003694:	200005bc 	.word	0x200005bc
 8003698:	200005c0 	.word	0x200005c0
 800369c:	200005c4 	.word	0x200005c4
 80036a0:	08008e2c 	.word	0x08008e2c
 80036a4:	200005b0 	.word	0x200005b0
 80036a8:	08008e54 	.word	0x08008e54
 80036ac:	200005b4 	.word	0x200005b4
 80036b0:	08008e80 	.word	0x08008e80
 80036b4:	200005b8 	.word	0x200005b8

080036b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b094      	sub	sp, #80	; 0x50
 80036bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c2:	2228      	movs	r2, #40	; 0x28
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 fa2a 	bl	8008b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036e8:	2302      	movs	r3, #2
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ec:	2301      	movs	r3, #1
 80036ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036f0:	2310      	movs	r3, #16
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036f4:	2302      	movs	r3, #2
 80036f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80036fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fafe 	bl	8004d08 <HAL_RCC_OscConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 800371c:	f000 f9a0 	bl	8003a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003720:	230f      	movs	r3, #15
 8003722:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003724:	2302      	movs	r3, #2
 8003726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800372c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003730:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fd63 	bl	8005208 <HAL_RCC_ClockConfig>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003752:	f000 f985 	bl	8003a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003756:	2302      	movs	r3, #2
 8003758:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800375a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f001 ff08 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8003778:	f000 f972 	bl	8003a60 <Error_Handler>
  }
}
 800377c:	bf00      	nop
 800377e:	3750      	adds	r7, #80	; 0x50
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <_ZL12MX_ADC1_Initv+0x8c>)
 8003798:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80037b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037bc:	2201      	movs	r2, #1
 80037be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037c2:	f000 fc27 	bl	8004014 <HAL_ADC_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80037d6:	f000 f943 	bl	8003a60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037da:	2301      	movs	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037de:	2301      	movs	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4808      	ldr	r0, [pc, #32]	; (800380c <_ZL12MX_ADC1_Initv+0x88>)
 80037ec:	f000 fe9e 	bl	800452c <HAL_ADC_ConfigChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8003800:	f000 f92e 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000528 	.word	0x20000528
 8003810:	40012400 	.word	0x40012400

08003814 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <_ZL12MX_SPI1_Initv+0x74>)
 800381c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003848:	2218      	movs	r2, #24
 800384a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 800384e:	2200      	movs	r2, #0
 8003850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003854:	2200      	movs	r2, #0
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003860:	220a      	movs	r2, #10
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003864:	4807      	ldr	r0, [pc, #28]	; (8003884 <_ZL12MX_SPI1_Initv+0x70>)
 8003866:	f001 fff9 	bl	800585c <HAL_SPI_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800387a:	f000 f8f1 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000558 	.word	0x20000558
 8003888:	40013000 	.word	0x40013000

0800388c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a2d      	ldr	r2, [pc, #180]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6193      	str	r3, [r2, #24]
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4a21      	ldr	r2, [pc, #132]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6193      	str	r3, [r2, #24]
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <_ZL12MX_GPIO_Initv+0xd0>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ee:	481c      	ldr	r0, [pc, #112]	; (8003960 <_ZL12MX_GPIO_Initv+0xd4>)
 80038f0:	f001 f9f1 	bl	8004cd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2119      	movs	r1, #25
 80038f8:	481a      	ldr	r0, [pc, #104]	; (8003964 <_ZL12MX_GPIO_Initv+0xd8>)
 80038fa:	f001 f9ec 	bl	8004cd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80038fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2301      	movs	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2302      	movs	r3, #2
 800390e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	4619      	mov	r1, r3
 8003916:	4812      	ldr	r0, [pc, #72]	; (8003960 <_ZL12MX_GPIO_Initv+0xd4>)
 8003918:	f001 f86c 	bl	80049f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin;
 800391c:	2319      	movs	r3, #25
 800391e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003928:	2302      	movs	r3, #2
 800392a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	4619      	mov	r1, r3
 8003932:	480c      	ldr	r0, [pc, #48]	; (8003964 <_ZL12MX_GPIO_Initv+0xd8>)
 8003934:	f001 f85e 	bl	80049f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_Pin UP_Pin RIGTH_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin|UP_Pin|RIGTH_Pin|LEFT_Pin;
 8003938:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800393c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	4619      	mov	r1, r3
 800394c:	4806      	ldr	r0, [pc, #24]	; (8003968 <_ZL12MX_GPIO_Initv+0xdc>)
 800394e:	f001 f851 	bl	80049f4 <HAL_GPIO_Init>

}
 8003952:	bf00      	nop
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40011000 	.word	0x40011000
 8003964:	40010800 	.word	0x40010800
 8003968:	40010c00 	.word	0x40010c00

0800396c <_ZL3clkPFvvE>:
static int32_t adRead(ADC_HandleTypeDef* hadc){
	HAL_ADC_Start(hadc);
	while(HAL_ADC_PollForConversion(hadc, 5)!= HAL_OK){}
	return HAL_ADC_GetValue(hadc);
}
static void clk(void (*f)()){
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	auto t1 = clock();
 8003974:	f005 f862 	bl	8008a3c <clock>
 8003978:	60f8      	str	r0, [r7, #12]
	f();
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4798      	blx	r3
	t1 = clock() -t1;
 800397e:	f005 f85d 	bl	8008a3c <clock>
 8003982:	4602      	mov	r2, r0
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	60fb      	str	r3, [r7, #12]
	osDelay(1000/Game::fps()-(int)(t1/(CLOCKS_PER_SEC/1000)));
 800398a:	f7fe f993 	bl	8001cb4 <_ZN4Game3fpsEv>
 800398e:	4602      	mov	r2, r0
 8003990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003994:	fb93 f3f2 	sdiv	r3, r3, r2
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	2100      	movs	r1, #0
 800399c:	fbb2 f2f1 	udiv	r2, r2, r1
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 fc85 	bl	80062b2 <osDelay>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZL4rendv>:
static void rend(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	Display::LCD_Clear();
 80039b4:	f7fd fec4 	bl	8001740 <_ZN7Display9LCD_ClearEv>
	Controller::atlVal();
 80039b8:	f7fd fa24 	bl	8000e04 <_ZN10Controller6atlValEv>
	snk.render();
 80039bc:	4803      	ldr	r0, [pc, #12]	; (80039cc <_ZL4rendv+0x1c>)
 80039be:	f7fe fd62 	bl	8002486 <_ZN5Snake6renderEv>
	food.render();
 80039c2:	4803      	ldr	r0, [pc, #12]	; (80039d0 <_ZL4rendv+0x20>)
 80039c4:	f7fe f8be 	bl	8001b44 <_ZN4Food6renderEv>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200005e8 	.word	0x200005e8
 80039d0:	200005c8 	.word	0x200005c8

080039d4 <_ZL3ticv>:
static void tic(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	snk.tick();
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <_ZL3ticv+0x14>)
 80039da:	f7fe fc53 	bl	8002284 <_ZN5Snake4tickEv>
	food.tick();
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <_ZL3ticv+0x18>)
 80039e0:	f7fe f86a 	bl	8001ab8 <_ZN4Food4tickEv>
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200005e8 	.word	0x200005e8
 80039ec:	200005c8 	.word	0x200005c8

080039f0 <_ZL4contv>:
static void cont(){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	Controller::atlVal();
 80039f4:	f7fd fa06 	bl	8000e04 <_ZN10Controller6atlValEv>
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_Z6renderPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_render */
void render(void const * argument)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Display::LCD_Init();
 8003a04:	f7fd fe5a 	bl	80016bc <_ZN7Display8LCD_InitEv>
  /* Infinite loop */
  for(;;)
  {
	  clk(rend);
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <_Z6renderPKv+0x14>)
 8003a0a:	f7ff ffaf 	bl	800396c <_ZL3clkPFvvE>
 8003a0e:	e7fb      	b.n	8003a08 <_Z6renderPKv+0xc>
 8003a10:	080039b1 	.word	0x080039b1

08003a14 <_Z4tickPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tick */
void tick(void const * argument)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tick */
  /* Infinite loop */
  for(;;)
  {
	  clk(tic);
 8003a1c:	4801      	ldr	r0, [pc, #4]	; (8003a24 <_Z4tickPKv+0x10>)
 8003a1e:	f7ff ffa5 	bl	800396c <_ZL3clkPFvvE>
 8003a22:	e7fb      	b.n	8003a1c <_Z4tickPKv+0x8>
 8003a24:	080039d5 	.word	0x080039d5

08003a28 <_Z10controllerPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controller */
void controller(void const * argument)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controller */
  /* Infinite loop */
	//Controller::setMux(&mControllerHandle);
  for(;;)
  {
	  clk(cont);
 8003a30:	4801      	ldr	r0, [pc, #4]	; (8003a38 <_Z10controllerPKv+0x10>)
 8003a32:	f7ff ff9b 	bl	800396c <_ZL3clkPFvvE>
 8003a36:	e7fb      	b.n	8003a30 <_Z10controllerPKv+0x8>
 8003a38:	080039f1 	.word	0x080039f1

08003a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a4e:	f000 faa3 	bl	8003f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <_Z41__static_initialization_and_destruction_0ii>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10d      	bne.n	8003a98 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Food food(&mFoodHandle);
 8003a86:	490d      	ldr	r1, [pc, #52]	; (8003abc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003a88:	480d      	ldr	r0, [pc, #52]	; (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003a8a:	f7fd ffd9 	bl	8001a40 <_ZN4FoodC1EPPv>
Snake snk(&food,&mSnakeHandle);
 8003a8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003a90:	490b      	ldr	r1, [pc, #44]	; (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003a92:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003a94:	f7fe face 	bl	8002034 <_ZN5SnakeC1EP4FoodPPv>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d105      	bne.n	8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8003aa8:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003aaa:	f7fe fbbf 	bl	800222c <_ZN5SnakeD1Ev>
Food food(&mFoodHandle);
 8003aae:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003ab0:	f7fd ffe0 	bl	8001a74 <_ZN4FoodD1Ev>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200005c4 	.word	0x200005c4
 8003ac0:	200005c8 	.word	0x200005c8
 8003ac4:	200005c0 	.word	0x200005c0
 8003ac8:	200005e8 	.word	0x200005e8

08003acc <_GLOBAL__sub_I_hadc1>:
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7ff ffc9 	bl	8003a6c <_Z41__static_initialization_and_destruction_0ii>
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_GLOBAL__sub_D_hadc1>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7ff ffc1 	bl	8003a6c <_Z41__static_initialization_and_destruction_0ii>
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_ZN4nodeC1Ev>:
 *      Author: nicolas-kruger
 */

#include "node.h"

node::node():Entity() {
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd ff18 	bl	800192c <_ZN6EntityC1Ev>
 8003afc:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <_ZN4nodeC1Ev+0x48>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f103 0418 	add.w	r4, r3, #24
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f004 febe 	bl	800888e <_ZNSaIcEC1Ev>
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	461a      	mov	r2, r3
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <_ZN4nodeC1Ev+0x4c>)
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f004 ff70 	bl	8008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 feb3 	bl	8008890 <_ZNSaIcED1Ev>
	// TODO Auto-generated constructor stub

}
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd90      	pop	{r4, r7, pc}
 8003b34:	08008f3c 	.word	0x08008f3c
 8003b38:	08008e9c 	.word	0x08008e9c

08003b3c <_ZN4nodeD1Ev>:

node::~node() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <_ZN4nodeD1Ev+0x2c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3318      	adds	r3, #24
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 ff15 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd ff06 	bl	8001968 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08008f3c 	.word	0x08008f3c

08003b6c <_ZN4nodeD0Ev>:
node::~node() {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
}
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ffe1 	bl	8003b3c <_ZN4nodeD1Ev>
 8003b7a:	2130      	movs	r1, #48	; 0x30
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f004 fe58 	bl	8008832 <_ZdlPvj>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZN4node6renderEv>:
void node::render(){
 8003b8c:	b5b0      	push	{r4, r5, r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	Display::LCD_Write_String_Grid(getX(), getY(), val);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd ff2e 	bl	80019f8 <_ZN6Entity4getXEv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b2dc      	uxtb	r4, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd ff3a 	bl	8001a1c <_ZN6Entity4getYEv>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	b2dd      	uxtb	r5, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 0218 	add.w	r2, r3, #24
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 feee 	bl	800899a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7fd fe32 	bl	8001830 <_ZN7Display21LCD_Write_String_GridEhhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003bcc:	f107 0308 	add.w	r3, r7, #8
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fed4 	bl	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003bd6:	bf00      	nop
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bdb0      	pop	{r4, r5, r7, pc}

08003bde <_ZN4node4tickEv>:
void node::tick(){
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]

}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <HAL_MspInit+0x5c>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <HAL_MspInit+0x5c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6193      	str	r3, [r2, #24]
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_MspInit+0x5c>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_MspInit+0x5c>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_MspInit+0x5c>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_MspInit+0x5c>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_MspInit+0x60>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_MspInit+0x60>)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40010000 	.word	0x40010000

08003c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_ADC_MspInit+0x6c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d121      	bne.n	8003cb8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7e:	6193      	str	r3, [r2, #24]
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6193      	str	r3, [r2, #24]
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_ADC_MspInit+0x70>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f107 0310 	add.w	r3, r7, #16
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_ADC_MspInit+0x74>)
 8003cb4:	f000 fe9e 	bl	80049f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cb8:	bf00      	nop
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40012400 	.word	0x40012400
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40010800 	.word	0x40010800

08003ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_SPI_MspInit+0x88>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d12f      	bne.n	8003d4c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003cf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6193      	str	r3, [r2, #24]
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_SPI_MspInit+0x8c>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d1c:	23a0      	movs	r3, #160	; 0xa0
 8003d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d24:	2303      	movs	r3, #3
 8003d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	f107 0310 	add.w	r3, r7, #16
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	480b      	ldr	r0, [pc, #44]	; (8003d5c <HAL_SPI_MspInit+0x90>)
 8003d30:	f000 fe60 	bl	80049f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f107 0310 	add.w	r3, r7, #16
 8003d44:	4619      	mov	r1, r3
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_SPI_MspInit+0x90>)
 8003d48:	f000 fe54 	bl	80049f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40013000 	.word	0x40013000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40010800 	.word	0x40010800

08003d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003d70:	2200      	movs	r2, #0
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	2019      	movs	r0, #25
 8003d76:	f000 fe12 	bl	800499e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003d7a:	2019      	movs	r0, #25
 8003d7c:	f000 fe2b 	bl	80049d6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_InitTick+0x9c>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_InitTick+0x9c>)
 8003d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d8a:	6193      	str	r3, [r2, #24]
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_InitTick+0x9c>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d98:	f107 0210 	add.w	r2, r7, #16
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fb9a 	bl	80054dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003da8:	f001 fb84 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8003dac:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <HAL_InitTick+0xa0>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0c9b      	lsrs	r3, r3, #18
 8003db8:	3b01      	subs	r3, #1
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_InitTick+0xa8>)
 8003dc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003ddc:	4809      	ldr	r0, [pc, #36]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dde:	f001 ffa3 	bl	8005d28 <HAL_TIM_Base_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <HAL_InitTick+0xa4>)
 8003dea:	f001 fff5 	bl	8005dd8 <HAL_TIM_Base_Start_IT>
 8003dee:	4603      	mov	r3, r0
 8003df0:	e000      	b.n	8003df4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3730      	adds	r7, #48	; 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	431bde83 	.word	0x431bde83
 8003e04:	2000139c 	.word	0x2000139c
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <HardFault_Handler+0x4>

08003e1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <MemManage_Handler+0x4>

08003e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <BusFault_Handler+0x4>

08003e2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <UsageFault_Handler+0x4>

08003e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM1_UP_IRQHandler+0x10>)
 8003e42:	f002 f81b 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000139c 	.word	0x2000139c

08003e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
	return 1;
 8003e54:	2301      	movs	r3, #1
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <_kill>:

int _kill(int pid, int sig)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e68:	f004 fdfc 	bl	8008a64 <__errno>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	2316      	movs	r3, #22
 8003e70:	6013      	str	r3, [r2, #0]
	return -1;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_exit>:

void _exit (int status)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ffe7 	bl	8003e5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e90:	e7fe      	b.n	8003e90 <_exit+0x12>

08003e92 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	return -1;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eb0:	4a14      	ldr	r2, [pc, #80]	; (8003f04 <_sbrk+0x5c>)
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <_sbrk+0x60>)
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <_sbrk+0x64>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <_sbrk+0x64>)
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <_sbrk+0x68>)
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <_sbrk+0x64>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d207      	bcs.n	8003ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ed8:	f004 fdc4 	bl	8008a64 <__errno>
 8003edc:	4602      	mov	r2, r0
 8003ede:	230c      	movs	r3, #12
 8003ee0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ee6:	e009      	b.n	8003efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <_sbrk+0x64>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <_sbrk+0x64>)
 8003ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20005000 	.word	0x20005000
 8003f08:	00000400 	.word	0x00000400
 8003f0c:	20000640 	.word	0x20000640
 8003f10:	200013f0 	.word	0x200013f0

08003f14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f22:	e003      	b.n	8003f2c <LoopCopyDataInit>

08003f24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f2a:	3104      	adds	r1, #4

08003f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f2c:	480a      	ldr	r0, [pc, #40]	; (8003f58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f34:	d3f6      	bcc.n	8003f24 <CopyDataInit>
  ldr r2, =_sbss
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f38:	e002      	b.n	8003f40 <LoopFillZerobss>

08003f3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f3c:	f842 3b04 	str.w	r3, [r2], #4

08003f40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f44:	d3f9      	bcc.n	8003f3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f46:	f7ff ffe5 	bl	8003f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f4a:	f004 fd91 	bl	8008a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f4e:	f7ff fb33 	bl	80035b8 <main>
  bx lr
 8003f52:	4770      	bx	lr
  ldr r3, =_sidata
 8003f54:	08008fc4 	.word	0x08008fc4
  ldr r0, =_sdata
 8003f58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f5c:	200002a0 	.word	0x200002a0
  ldr r2, =_sbss
 8003f60:	200002a0 	.word	0x200002a0
  ldr r3, = _ebss
 8003f64:	200013ec 	.word	0x200013ec

08003f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f68:	e7fe      	b.n	8003f68 <ADC1_2_IRQHandler>
	...

08003f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_Init+0x28>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <HAL_Init+0x28>)
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f000 fd03 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7ff feec 	bl	8003d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f88:	f7ff fe32 	bl	8003bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000

08003f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_IncTick+0x1c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_IncTick+0x20>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a03      	ldr	r2, [pc, #12]	; (8003fb8 <HAL_IncTick+0x20>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	20000230 	.word	0x20000230
 8003fb8:	200013e4 	.word	0x200013e4

08003fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <HAL_GetTick+0x10>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	200013e4 	.word	0x200013e4

08003fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe8:	d005      	beq.n	8003ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_Delay+0x40>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ff6:	bf00      	nop
 8003ff8:	f7ff ffe0 	bl	8003fbc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d8f7      	bhi.n	8003ff8 <HAL_Delay+0x28>
  {
  }
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000230 	.word	0x20000230

08004014 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0be      	b.n	80041b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fdfe 	bl	8003c54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fbb1 	bl	80047c0 <ADC_ConversionStop_Disable>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 8099 	bne.w	80041a2 <HAL_ADC_Init+0x18e>
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 8095 	bne.w	80041a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004094:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7b1b      	ldrb	r3, [r3, #12]
 800409a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800409c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d003      	beq.n	80040b6 <HAL_ADC_Init+0xa2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d102      	bne.n	80040bc <HAL_ADC_Init+0xa8>
 80040b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ba:	e000      	b.n	80040be <HAL_ADC_Init+0xaa>
 80040bc:	2300      	movs	r3, #0
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7d1b      	ldrb	r3, [r3, #20]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d119      	bne.n	8004100 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7b1b      	ldrb	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	3b01      	subs	r3, #1
 80040da:	035a      	lsls	r2, r3, #13
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e00b      	b.n	8004100 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_ADC_Init+0x1a8>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	430b      	orrs	r3, r1
 8004126:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004130:	d003      	beq.n	800413a <HAL_ADC_Init+0x126>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d104      	bne.n	8004144 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	3b01      	subs	r3, #1
 8004140:	051b      	lsls	r3, r3, #20
 8004142:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	430a      	orrs	r2, r1
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_ADC_Init+0x1ac>)
 8004160:	4013      	ands	r3, r2
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	d10b      	bne.n	8004180 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800417e:	e018      	b.n	80041b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f023 0312 	bic.w	r3, r3, #18
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041a0:	e007      	b.n	80041b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f043 0210 	orr.w	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	ffe1f7fd 	.word	0xffe1f7fd
 80041c0:	ff1f0efe 	.word	0xff1f0efe

080041c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADC_Start+0x1a>
 80041da:	2302      	movs	r3, #2
 80041dc:	e098      	b.n	8004310 <HAL_ADC_Start+0x14c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa98 	bl	800471c <ADC_Enable>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 8087 	bne.w	8004306 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <HAL_ADC_Start+0x154>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d105      	bne.n	8004222 <HAL_ADC_Start+0x5e>
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_ADC_Start+0x158>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d115      	bne.n	800424e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d026      	beq.n	800428a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004244:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800424c:	e01d      	b.n	800428a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <HAL_ADC_Start+0x158>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_ADC_Start+0xaa>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2b      	ldr	r2, [pc, #172]	; (8004318 <HAL_ADC_Start+0x154>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <HAL_ADC_Start+0xc6>
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_ADC_Start+0x158>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	f023 0206 	bic.w	r2, r3, #6
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80042a2:	e002      	b.n	80042aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0202 	mvn.w	r2, #2
 80042ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042ca:	d113      	bne.n	80042f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80042d0:	4a11      	ldr	r2, [pc, #68]	; (8004318 <HAL_ADC_Start+0x154>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d105      	bne.n	80042e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_ADC_Start+0x158>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	e00c      	b.n	800430e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	e003      	b.n	800430e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40012800 	.word	0x40012800
 800431c:	40012400 	.word	0x40012400

08004320 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004336:	f7ff fe41 	bl	8003fbc <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0c8      	b.n	80044f4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d12a      	bne.n	80043c6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800437a:	2b00      	cmp	r3, #0
 800437c:	d123      	bne.n	80043c6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800437e:	e01a      	b.n	80043b6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004386:	d016      	beq.n	80043b6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_ADC_PollForConversion+0x7e>
 800438e:	f7ff fe15 	bl	8003fbc <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d20b      	bcs.n	80043b6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e09e      	b.n	80044f4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0dd      	beq.n	8004380 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80043c4:	e06c      	b.n	80044a0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80043c6:	4b4d      	ldr	r3, [pc, #308]	; (80044fc <HAL_ADC_PollForConversion+0x1dc>)
 80043c8:	681c      	ldr	r4, [r3, #0]
 80043ca:	2002      	movs	r0, #2
 80043cc:	f001 f98a 	bl	80056e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80043d0:	4603      	mov	r3, r0
 80043d2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	4b48      	ldr	r3, [pc, #288]	; (8004500 <HAL_ADC_PollForConversion+0x1e0>)
 80043de:	400b      	ands	r3, r1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d118      	bne.n	8004416 <HAL_ADC_PollForConversion+0xf6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_ADC_PollForConversion+0x1e4>)
 80043ec:	400b      	ands	r3, r1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d111      	bne.n	8004416 <HAL_ADC_PollForConversion+0xf6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6919      	ldr	r1, [r3, #16]
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_ADC_PollForConversion+0x1e8>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_ADC_PollForConversion+0xf2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_ADC_PollForConversion+0x1ec>)
 8004408:	400b      	ands	r3, r1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_ADC_PollForConversion+0xf2>
 800440e:	2314      	movs	r3, #20
 8004410:	e020      	b.n	8004454 <HAL_ADC_PollForConversion+0x134>
 8004412:	2329      	movs	r3, #41	; 0x29
 8004414:	e01e      	b.n	8004454 <HAL_ADC_PollForConversion+0x134>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6919      	ldr	r1, [r3, #16]
 800441c:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_ADC_PollForConversion+0x1e8>)
 800441e:	400b      	ands	r3, r1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_ADC_PollForConversion+0x112>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68d9      	ldr	r1, [r3, #12]
 800442a:	4b38      	ldr	r3, [pc, #224]	; (800450c <HAL_ADC_PollForConversion+0x1ec>)
 800442c:	400b      	ands	r3, r1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HAL_ADC_PollForConversion+0x12e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6919      	ldr	r1, [r3, #16]
 8004438:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_ADC_PollForConversion+0x1f0>)
 800443a:	400b      	ands	r3, r1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d108      	bne.n	8004452 <HAL_ADC_PollForConversion+0x132>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68d9      	ldr	r1, [r3, #12]
 8004446:	4b32      	ldr	r3, [pc, #200]	; (8004510 <HAL_ADC_PollForConversion+0x1f0>)
 8004448:	400b      	ands	r3, r1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_PollForConversion+0x132>
 800444e:	2354      	movs	r3, #84	; 0x54
 8004450:	e000      	b.n	8004454 <HAL_ADC_PollForConversion+0x134>
 8004452:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800445a:	e01d      	b.n	8004498 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004462:	d016      	beq.n	8004492 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_ADC_PollForConversion+0x15a>
 800446a:	f7ff fda7 	bl	8003fbc <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d20b      	bcs.n	8004492 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e030      	b.n	80044f4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d8dd      	bhi.n	800445c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0212 	mvn.w	r2, #18
 80044a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044c4:	d115      	bne.n	80044f2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d111      	bne.n	80044f2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d105      	bne.n	80044f2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	f043 0201 	orr.w	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	20000228 	.word	0x20000228
 8004500:	24924924 	.word	0x24924924
 8004504:	00924924 	.word	0x00924924
 8004508:	12492492 	.word	0x12492492
 800450c:	00492492 	.word	0x00492492
 8004510:	00249249 	.word	0x00249249

08004514 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x20>
 8004548:	2302      	movs	r3, #2
 800454a:	e0dc      	b.n	8004706 <HAL_ADC_ConfigChannel+0x1da>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d81c      	bhi.n	8004596 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	3b05      	subs	r3, #5
 800456e:	221f      	movs	r2, #31
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	4019      	ands	r1, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	3b05      	subs	r3, #5
 8004588:	fa00 f203 	lsl.w	r2, r0, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	635a      	str	r2, [r3, #52]	; 0x34
 8004594:	e03c      	b.n	8004610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d81c      	bhi.n	80045d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	3b23      	subs	r3, #35	; 0x23
 80045b0:	221f      	movs	r2, #31
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	4019      	ands	r1, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	3b23      	subs	r3, #35	; 0x23
 80045ca:	fa00 f203 	lsl.w	r2, r0, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
 80045d6:	e01b      	b.n	8004610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	3b41      	subs	r3, #65	; 0x41
 80045ea:	221f      	movs	r2, #31
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	4019      	ands	r1, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	3b41      	subs	r3, #65	; 0x41
 8004604:	fa00 f203 	lsl.w	r2, r0, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b09      	cmp	r3, #9
 8004616:	d91c      	bls.n	8004652 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	3b1e      	subs	r3, #30
 800462a:	2207      	movs	r2, #7
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	4019      	ands	r1, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6898      	ldr	r0, [r3, #8]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	3b1e      	subs	r3, #30
 8004644:	fa00 f203 	lsl.w	r2, r0, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e019      	b.n	8004686 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6919      	ldr	r1, [r3, #16]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	2207      	movs	r2, #7
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	4019      	ands	r1, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6898      	ldr	r0, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	fa00 f203 	lsl.w	r2, r0, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b10      	cmp	r3, #16
 800468c:	d003      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004692:	2b11      	cmp	r3, #17
 8004694:	d132      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_ADC_ConfigChannel+0x1e4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d125      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d126      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80046bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d11a      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <HAL_ADC_ConfigChannel+0x1e8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_ADC_ConfigChannel+0x1ec>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0c9a      	lsrs	r2, r3, #18
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046dc:	e002      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f9      	bne.n	80046de <HAL_ADC_ConfigChannel+0x1b2>
 80046ea:	e007      	b.n	80046fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40012400 	.word	0x40012400
 8004714:	20000228 	.word	0x20000228
 8004718:	431bde83 	.word	0x431bde83

0800471c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d039      	beq.n	80047ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <ADC_Enable+0x9c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <ADC_Enable+0xa0>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004758:	e002      	b.n	8004760 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	3b01      	subs	r3, #1
 800475e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f9      	bne.n	800475a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004766:	f7ff fc29 	bl	8003fbc <HAL_GetTick>
 800476a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800476c:	e018      	b.n	80047a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800476e:	f7ff fc25 	bl	8003fbc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d911      	bls.n	80047a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f043 0210 	orr.w	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d1df      	bne.n	800476e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000228 	.word	0x20000228
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d127      	bne.n	800482a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ea:	f7ff fbe7 	bl	8003fbc <HAL_GetTick>
 80047ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047f0:	e014      	b.n	800481c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047f2:	f7ff fbe3 	bl	8003fbc <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d90d      	bls.n	800481c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d0e3      	beq.n	80047f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <__NVIC_SetPriorityGrouping+0x44>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004850:	4013      	ands	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800485c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <__NVIC_SetPriorityGrouping+0x44>)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	60d3      	str	r3, [r2, #12]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <__NVIC_GetPriorityGrouping+0x18>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f003 0307 	and.w	r3, r3, #7
}
 800488a:	4618      	mov	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	db0b      	blt.n	80048c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	f003 021f 	and.w	r2, r3, #31
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <__NVIC_EnableIRQ+0x34>)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2001      	movs	r0, #1
 80048ba:	fa00 f202 	lsl.w	r2, r0, r2
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	e000e100 	.word	0xe000e100

080048d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	db0a      	blt.n	80048fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <__NVIC_SetPriority+0x4c>)
 80048ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f8:	e00a      	b.n	8004910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4908      	ldr	r1, [pc, #32]	; (8004920 <__NVIC_SetPriority+0x50>)
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	3b04      	subs	r3, #4
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	440b      	add	r3, r1
 800490e:	761a      	strb	r2, [r3, #24]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000e100 	.word	0xe000e100
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f1c3 0307 	rsb	r3, r3, #7
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf28      	it	cs
 8004942:	2304      	movcs	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3304      	adds	r3, #4
 800494a:	2b06      	cmp	r3, #6
 800494c:	d902      	bls.n	8004954 <NVIC_EncodePriority+0x30>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b03      	subs	r3, #3
 8004952:	e000      	b.n	8004956 <NVIC_EncodePriority+0x32>
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	401a      	ands	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800496c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43d9      	mvns	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800497c:	4313      	orrs	r3, r2
         );
}
 800497e:	4618      	mov	r0, r3
 8004980:	3724      	adds	r7, #36	; 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff4f 	bl	8004834 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b0:	f7ff ff64 	bl	800487c <__NVIC_GetPriorityGrouping>
 80049b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f7ff ffb2 	bl	8004924 <NVIC_EncodePriority>
 80049c0:	4602      	mov	r2, r0
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ff81 	bl	80048d0 <__NVIC_SetPriority>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4603      	mov	r3, r0
 80049de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff57 	bl	8004898 <__NVIC_EnableIRQ>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a06:	e127      	b.n	8004c58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	f040 8116 	bne.w	8004c52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b12      	cmp	r3, #18
 8004a2c:	d034      	beq.n	8004a98 <HAL_GPIO_Init+0xa4>
 8004a2e:	2b12      	cmp	r3, #18
 8004a30:	d80d      	bhi.n	8004a4e <HAL_GPIO_Init+0x5a>
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d02b      	beq.n	8004a8e <HAL_GPIO_Init+0x9a>
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d804      	bhi.n	8004a44 <HAL_GPIO_Init+0x50>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d031      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d01c      	beq.n	8004a7c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a42:	e048      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d043      	beq.n	8004ad0 <HAL_GPIO_Init+0xdc>
 8004a48:	2b11      	cmp	r3, #17
 8004a4a:	d01b      	beq.n	8004a84 <HAL_GPIO_Init+0x90>
          break;
 8004a4c:	e043      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a4e:	4a89      	ldr	r2, [pc, #548]	; (8004c74 <HAL_GPIO_Init+0x280>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d026      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
 8004a54:	4a87      	ldr	r2, [pc, #540]	; (8004c74 <HAL_GPIO_Init+0x280>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d806      	bhi.n	8004a68 <HAL_GPIO_Init+0x74>
 8004a5a:	4a87      	ldr	r2, [pc, #540]	; (8004c78 <HAL_GPIO_Init+0x284>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d020      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
 8004a60:	4a86      	ldr	r2, [pc, #536]	; (8004c7c <HAL_GPIO_Init+0x288>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
          break;
 8004a66:	e036      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a68:	4a85      	ldr	r2, [pc, #532]	; (8004c80 <HAL_GPIO_Init+0x28c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
 8004a6e:	4a85      	ldr	r2, [pc, #532]	; (8004c84 <HAL_GPIO_Init+0x290>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d016      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
 8004a74:	4a84      	ldr	r2, [pc, #528]	; (8004c88 <HAL_GPIO_Init+0x294>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_GPIO_Init+0xae>
          break;
 8004a7a:	e02c      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	623b      	str	r3, [r7, #32]
          break;
 8004a82:	e028      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	623b      	str	r3, [r7, #32]
          break;
 8004a8c:	e023      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	3308      	adds	r3, #8
 8004a94:	623b      	str	r3, [r7, #32]
          break;
 8004a96:	e01e      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	623b      	str	r3, [r7, #32]
          break;
 8004aa0:	e019      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004aaa:	2304      	movs	r3, #4
 8004aac:	623b      	str	r3, [r7, #32]
          break;
 8004aae:	e012      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ab8:	2308      	movs	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	611a      	str	r2, [r3, #16]
          break;
 8004ac2:	e008      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	615a      	str	r2, [r3, #20]
          break;
 8004ace:	e002      	b.n	8004ad6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
          break;
 8004ad4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2bff      	cmp	r3, #255	; 0xff
 8004ada:	d801      	bhi.n	8004ae0 <HAL_GPIO_Init+0xec>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	e001      	b.n	8004ae4 <HAL_GPIO_Init+0xf0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2bff      	cmp	r3, #255	; 0xff
 8004aea:	d802      	bhi.n	8004af2 <HAL_GPIO_Init+0xfe>
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	e002      	b.n	8004af8 <HAL_GPIO_Init+0x104>
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	3b08      	subs	r3, #8
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	210f      	movs	r1, #15
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	401a      	ands	r2, r3
 8004b0a:	6a39      	ldr	r1, [r7, #32]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	431a      	orrs	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8096 	beq.w	8004c52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_GPIO_Init+0x298>)
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_GPIO_Init+0x298>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6193      	str	r3, [r2, #24]
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <HAL_GPIO_Init+0x298>)
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b3e:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_GPIO_Init+0x29c>)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3302      	adds	r3, #2
 8004b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4b      	ldr	r2, [pc, #300]	; (8004c94 <HAL_GPIO_Init+0x2a0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_Init+0x19e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <HAL_GPIO_Init+0x2a4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00d      	beq.n	8004b8e <HAL_GPIO_Init+0x19a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a49      	ldr	r2, [pc, #292]	; (8004c9c <HAL_GPIO_Init+0x2a8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <HAL_GPIO_Init+0x196>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a48      	ldr	r2, [pc, #288]	; (8004ca0 <HAL_GPIO_Init+0x2ac>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_GPIO_Init+0x192>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x1a0>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e004      	b.n	8004b94 <HAL_GPIO_Init+0x1a0>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e002      	b.n	8004b94 <HAL_GPIO_Init+0x1a0>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_GPIO_Init+0x1a0>
 8004b92:	2300      	movs	r3, #0
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	f002 0203 	and.w	r2, r2, #3
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ba4:	493a      	ldr	r1, [pc, #232]	; (8004c90 <HAL_GPIO_Init+0x29c>)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	3302      	adds	r3, #2
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4938      	ldr	r1, [pc, #224]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
 8004bca:	e006      	b.n	8004bda <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4933      	ldr	r1, [pc, #204]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	492e      	ldr	r1, [pc, #184]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
 8004bf2:	e006      	b.n	8004c02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	4929      	ldr	r1, [pc, #164]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	4924      	ldr	r1, [pc, #144]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
 8004c1a:	e006      	b.n	8004c2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	491f      	ldr	r1, [pc, #124]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	491a      	ldr	r1, [pc, #104]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
 8004c42:	e006      	b.n	8004c52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	4915      	ldr	r1, [pc, #84]	; (8004ca4 <HAL_GPIO_Init+0x2b0>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	3301      	adds	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f aed0 	bne.w	8004a08 <HAL_GPIO_Init+0x14>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	372c      	adds	r7, #44	; 0x2c
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	10210000 	.word	0x10210000
 8004c78:	10110000 	.word	0x10110000
 8004c7c:	10120000 	.word	0x10120000
 8004c80:	10310000 	.word	0x10310000
 8004c84:	10320000 	.word	0x10320000
 8004c88:	10220000 	.word	0x10220000
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010800 	.word	0x40010800
 8004c98:	40010c00 	.word	0x40010c00
 8004c9c:	40011000 	.word	0x40011000
 8004ca0:	40011400 	.word	0x40011400
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce6:	787b      	ldrb	r3, [r7, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cf2:	e003      	b.n	8004cfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	041a      	lsls	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e26c      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8087 	beq.w	8004e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d112      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x12c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d168      	bne.n	8004e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e246      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_OscConfig+0x76>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xbc>
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7ff f8ea 	bl	8003fbc <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7ff f8e6 	bl	8003fbc <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1fa      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xe4>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7ff f8d6 	bl	8003fbc <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7ff f8d2 	bl	8003fbc <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1e6      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x10c>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1ba      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4939      	ldr	r1, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7ff f88b 	bl	8003fbc <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7ff f887 	bl	8003fbc <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e19b      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7ff f86a 	bl	8003fbc <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7ff f866 	bl	8003fbc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e17a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03a      	beq.n	8004f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7ff f84a 	bl	8003fbc <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7ff f846 	bl	8003fbc <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e15a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 faf6 	bl	800553c <RCC_Delay>
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7ff f830 	bl	8003fbc <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7ff f82c 	bl	8003fbc <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d908      	bls.n	8004f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e140      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e9      	bne.n	8004f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b97      	ldr	r3, [pc, #604]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b94      	ldr	r3, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a93      	ldr	r2, [pc, #588]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]
 8004fb6:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a8a      	ldr	r2, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7fe ffed 	bl	8003fbc <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fe ffe9 	bl	8003fbc <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0fd      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x312>
 800500c:	4b7b      	ldr	r3, [pc, #492]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a7a      	ldr	r2, [pc, #488]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	e02d      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x334>
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e01c      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x356>
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6213      	str	r3, [r2, #32]
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a69      	ldr	r2, [pc, #420]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a66      	ldr	r2, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7fe ff9d 	bl	8003fbc <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fe ff99 	bl	8003fbc <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0ab      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCC_OscConfig+0x37e>
 80050a8:	e014      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fe ff87 	bl	8003fbc <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fe ff83 	bl	8003fbc <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e095      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4a47      	ldr	r2, [pc, #284]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8081 	beq.w	80051f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d061      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d146      	bne.n	8005192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fe ff57 	bl	8003fbc <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fe ff53 	bl	8003fbc <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e067      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005124:	4b35      	ldr	r3, [pc, #212]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d108      	bne.n	800514c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	430b      	orrs	r3, r1
 800515e:	4927      	ldr	r1, [pc, #156]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fe ff27 	bl	8003fbc <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fe ff23 	bl	8003fbc <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e037      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x46a>
 8005190:	e02f      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fe ff10 	bl	8003fbc <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fe ff0c 	bl	8003fbc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e020      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x498>
 80051be:	e018      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e013      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
 8005204:	42420060 	.word	0x42420060

08005208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d0      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800521c:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d910      	bls.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 0207 	bic.w	r2, r3, #7
 8005232:	4965      	ldr	r1, [pc, #404]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0b8      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800526e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a52      	ldr	r2, [pc, #328]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005286:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b50      	ldr	r3, [pc, #320]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	494d      	ldr	r1, [pc, #308]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d040      	beq.n	8005328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b47      	ldr	r3, [pc, #284]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d115      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e07f      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c6:	4b41      	ldr	r3, [pc, #260]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e073      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06b      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f023 0203 	bic.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4936      	ldr	r1, [pc, #216]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f8:	f7fe fe60 	bl	8003fbc <HAL_GetTick>
 80052fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005300:	f7fe fe5c 	bl	8003fbc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e053      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 020c 	and.w	r2, r3, #12
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	429a      	cmp	r2, r3
 8005326:	d1eb      	bne.n	8005300 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d210      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 0207 	bic.w	r2, r3, #7
 800533e:	4922      	ldr	r1, [pc, #136]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e032      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4916      	ldr	r1, [pc, #88]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005396:	f000 f821 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800539a:	4601      	mov	r1, r0
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80053a8:	5cd3      	ldrb	r3, [r2, r3]
 80053aa:	fa21 f303 	lsr.w	r3, r1, r3
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <HAL_RCC_ClockConfig+0x1cc>)
 80053b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1d0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fcd2 	bl	8003d60 <HAL_InitTick>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40022000 	.word	0x40022000
 80053cc:	40021000 	.word	0x40021000
 80053d0:	08008f50 	.word	0x08008f50
 80053d4:	20000228 	.word	0x20000228
 80053d8:	2000022c 	.word	0x2000022c

080053dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	b490      	push	{r4, r7}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <HAL_RCC_GetSysClockFreq+0xb0>)
 80053e4:	1d3c      	adds	r4, r7, #4
 80053e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053ec:	4b28      	ldr	r3, [pc, #160]	; (8005490 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b04      	cmp	r3, #4
 8005414:	d002      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x40>
 8005416:	2b08      	cmp	r3, #8
 8005418:	d003      	beq.n	8005422 <HAL_RCC_GetSysClockFreq+0x46>
 800541a:	e02d      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800541e:	623b      	str	r3, [r7, #32]
      break;
 8005420:	e02d      	b.n	800547e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	0c9b      	lsrs	r3, r3, #18
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800542e:	4413      	add	r3, r2
 8005430:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005434:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0c5b      	lsrs	r3, r3, #17
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800544e:	4413      	add	r3, r2
 8005450:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005454:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4a0f      	ldr	r2, [pc, #60]	; (8005498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800545a:	fb02 f203 	mul.w	r2, r2, r3
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	e004      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <HAL_RCC_GetSysClockFreq+0xc0>)
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	623b      	str	r3, [r7, #32]
      break;
 8005476:	e002      	b.n	800547e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800547a:	623b      	str	r3, [r7, #32]
      break;
 800547c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800547e:	6a3b      	ldr	r3, [r7, #32]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3728      	adds	r7, #40	; 0x28
 8005484:	46bd      	mov	sp, r7
 8005486:	bc90      	pop	{r4, r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	08008ea0 	.word	0x08008ea0
 8005490:	08008eb0 	.word	0x08008eb0
 8005494:	40021000 	.word	0x40021000
 8005498:	007a1200 	.word	0x007a1200
 800549c:	003d0900 	.word	0x003d0900

080054a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	20000228 	.word	0x20000228

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054b8:	f7ff fff2 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80054bc:	4601      	mov	r1, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	0adb      	lsrs	r3, r3, #11
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000
 80054d8:	08008f60 	.word	0x08008f60

080054dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	220f      	movs	r2, #15
 80054ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054ec:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_RCC_GetClockConfig+0x58>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 0203 	and.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCC_GetClockConfig+0x58>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_GetClockConfig+0x58>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCC_GetClockConfig+0x58>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCC_GetClockConfig+0x5c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0207 	and.w	r2, r3, #7
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	40021000 	.word	0x40021000
 8005538:	40022000 	.word	0x40022000

0800553c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <RCC_Delay+0x34>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <RCC_Delay+0x38>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	0a5b      	lsrs	r3, r3, #9
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005558:	bf00      	nop
  }
  while (Delay --);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1e5a      	subs	r2, r3, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f9      	bne.n	8005558 <RCC_Delay+0x1c>
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000228 	.word	0x20000228
 8005574:	10624dd3 	.word	0x10624dd3

08005578 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d07d      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005598:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a4:	4b4c      	ldr	r3, [pc, #304]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4a4b      	ldr	r2, [pc, #300]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	61d3      	str	r3, [r2, #28]
 80055b0:	4b49      	ldr	r3, [pc, #292]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	4b46      	ldr	r3, [pc, #280]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d118      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d8:	f7fe fcf0 	bl	8003fbc <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	e008      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e0:	f7fe fcec 	bl	8003fbc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e06d      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02e      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d027      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800561c:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800562c:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005632:	4a29      	ldr	r2, [pc, #164]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d014      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005642:	f7fe fcbb 	bl	8003fbc <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fe fcb7 	bl	8003fbc <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e036      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ee      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4917      	ldr	r1, [pc, #92]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567a:	4313      	orrs	r3, r2
 800567c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4904      	ldr	r1, [pc, #16]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
 80056e0:	42420440 	.word	0x42420440

080056e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b08d      	sub	sp, #52	; 0x34
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056ec:	4b55      	ldr	r3, [pc, #340]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80056ee:	f107 040c 	add.w	r4, r7, #12
 80056f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
 8005702:	2300      	movs	r3, #0
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005706:	2300      	movs	r3, #0
 8005708:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	2300      	movs	r3, #0
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d07f      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d002      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800571c:	2b01      	cmp	r3, #1
 800571e:	d048      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005720:	e08b      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005722:	4b4a      	ldr	r3, [pc, #296]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005728:	4b48      	ldr	r3, [pc, #288]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d07f      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	0c9b      	lsrs	r3, r3, #18
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005740:	4413      	add	r3, r2
 8005742:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005746:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005752:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	0c5b      	lsrs	r3, r3, #17
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005760:	4413      	add	r3, r2
 8005762:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005772:	4a37      	ldr	r2, [pc, #220]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	fbb2 f2f3 	udiv	r2, r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005782:	e004      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	4a33      	ldr	r2, [pc, #204]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579a:	d102      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057a0:	e048      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057b0:	e040      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80057b2:	4b26      	ldr	r3, [pc, #152]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d108      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80057ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	e01f      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d109      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80057ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f4:	e00f      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005800:	d11a      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800580e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005814:	e010      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005816:	e00f      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005818:	f7ff fe4c 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	0b9b      	lsrs	r3, r3, #14
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	3301      	adds	r3, #1
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005832:	e002      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005834:	bf00      	nop
 8005836:	e000      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005838:	bf00      	nop
    }
  }
  return (frequency);
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800583c:	4618      	mov	r0, r3
 800583e:	3734      	adds	r7, #52	; 0x34
 8005840:	46bd      	mov	sp, r7
 8005842:	bd90      	pop	{r4, r7, pc}
 8005844:	08008eb4 	.word	0x08008eb4
 8005848:	08008ec4 	.word	0x08008ec4
 800584c:	40021000 	.word	0x40021000
 8005850:	007a1200 	.word	0x007a1200
 8005854:	003d0900 	.word	0x003d0900
 8005858:	aaaaaaab 	.word	0xaaaaaaab

0800585c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e076      	b.n	800595c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d108      	bne.n	8005888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587e:	d009      	beq.n	8005894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	61da      	str	r2, [r3, #28]
 8005886:	e005      	b.n	8005894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fe fa0c 	bl	8003ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	ea42 0103 	orr.w	r1, r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	0c1a      	lsrs	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f002 0204 	and.w	r2, r2, #4
 800593a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Transmit+0x22>
 8005982:	2302      	movs	r3, #2
 8005984:	e126      	b.n	8005bd4 <HAL_SPI_Transmit+0x270>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598e:	f7fe fb15 	bl	8003fbc <HAL_GetTick>
 8005992:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059a8:	e10b      	b.n	8005bc2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Transmit+0x52>
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ba:	e102      	b.n	8005bc2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2203      	movs	r2, #3
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a02:	d10f      	bne.n	8005a24 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d007      	beq.n	8005a42 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4a:	d14b      	bne.n	8005ae4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Transmit+0xf6>
 8005a54:	8afb      	ldrh	r3, [r7, #22]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d13e      	bne.n	8005ad8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	881a      	ldrh	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a7e:	e02b      	b.n	8005ad8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d112      	bne.n	8005ab4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ab2:	e011      	b.n	8005ad8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab4:	f7fe fa82 	bl	8003fbc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d803      	bhi.n	8005acc <HAL_SPI_Transmit+0x168>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_Transmit+0x16e>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ad6:	e074      	b.n	8005bc2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1ce      	bne.n	8005a80 <HAL_SPI_Transmit+0x11c>
 8005ae2:	e04c      	b.n	8005b7e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Transmit+0x18e>
 8005aec:	8afb      	ldrh	r3, [r7, #22]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d140      	bne.n	8005b74 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b18:	e02c      	b.n	8005b74 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d113      	bne.n	8005b50 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b4e:	e011      	b.n	8005b74 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b50:	f7fe fa34 	bl	8003fbc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d803      	bhi.n	8005b68 <HAL_SPI_Transmit+0x204>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Transmit+0x20a>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b72:	e026      	b.n	8005bc2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1cd      	bne.n	8005b1a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f8b2 	bl	8005cec <SPI_EndRxTxTransaction>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e000      	b.n	8005bc2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005bc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bec:	f7fe f9e6 	bl	8003fbc <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bfc:	f7fe f9de 	bl	8003fbc <HAL_GetTick>
 8005c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c02:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	015b      	lsls	r3, r3, #5
 8005c08:	0d1b      	lsrs	r3, r3, #20
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	fb02 f303 	mul.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c12:	e054      	b.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1a:	d050      	beq.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c1c:	f7fe f9ce 	bl	8003fbc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d902      	bls.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d13d      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d111      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c54:	d004      	beq.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5e:	d107      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c78:	d10f      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e017      	b.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d19b      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000228 	.word	0x20000228

08005cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff ff6a 	bl	8005bdc <SPI_WaitFlagStateUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f043 0220 	orr.w	r2, r3, #32
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e000      	b.n	8005d20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e041      	b.n	8005dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f839 	bl	8005dc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 f9b4 	bl	80060d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e03a      	b.n	8005e66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a18      	ldr	r2, [pc, #96]	; (8005e70 <HAL_TIM_Base_Start_IT+0x98>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x58>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1a:	d009      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x58>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x58>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b06      	cmp	r3, #6
 8005e40:	d010      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	e007      	b.n	8005e64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800

08005e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0202 	mvn.w	r2, #2
 8005ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8ed 	bl	800609e <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8e0 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f8ef 	bl	80060b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0204 	mvn.w	r2, #4
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8c3 	bl	800609e <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8b6 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8c5 	bl	80060b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0208 	mvn.w	r2, #8
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f899 	bl	800609e <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f88c 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f89b 	bl	80060b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b10      	cmp	r3, #16
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0210 	mvn.w	r2, #16
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f86f 	bl	800609e <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f862 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f871 	bl	80060b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0201 	mvn.w	r2, #1
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fd fd1e 	bl	8003a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8bf 	bl	80061aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d107      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f835 	bl	80060c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b20      	cmp	r3, #32
 8006064:	d10e      	bne.n	8006084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b20      	cmp	r3, #32
 8006072:	d107      	bne.n	8006084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0220 	mvn.w	r2, #32
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f88a 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a29      	ldr	r2, [pc, #164]	; (800618c <TIM_Base_SetConfig+0xb8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a26      	ldr	r2, [pc, #152]	; (8006190 <TIM_Base_SetConfig+0xbc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a25      	ldr	r2, [pc, #148]	; (8006194 <TIM_Base_SetConfig+0xc0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <TIM_Base_SetConfig+0xb8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006124:	d007      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <TIM_Base_SetConfig+0xbc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a18      	ldr	r2, [pc, #96]	; (8006194 <TIM_Base_SetConfig+0xc0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <TIM_Base_SetConfig+0xb8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	615a      	str	r2, [r3, #20]
}
 8006182:	bf00      	nop
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ce:	2b84      	cmp	r3, #132	; 0x84
 80061d0:	d005      	beq.n	80061de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	3303      	adds	r3, #3
 80061dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f0:	f3ef 8305 	mrs	r3, IPSR
 80061f4:	607b      	str	r3, [r7, #4]
  return(result);
 80061f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006210:	f001 f91e 	bl	8007450 <vTaskStartScheduler>
  
  return osOK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	bd80      	pop	{r7, pc}

0800621a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800621a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621c:	b089      	sub	sp, #36	; 0x24
 800621e:	af04      	add	r7, sp, #16
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <osThreadCreate+0x54>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01c      	beq.n	800626e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685c      	ldr	r4, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681d      	ldr	r5, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691e      	ldr	r6, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ffb8 	bl	80061bc <makeFreeRtosPriority>
 800624c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	9100      	str	r1, [sp, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	4632      	mov	r2, r6
 8006260:	4629      	mov	r1, r5
 8006262:	4620      	mov	r0, r4
 8006264:	f000 ff3a 	bl	80070dc <xTaskCreateStatic>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	e01c      	b.n	80062a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685c      	ldr	r4, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627a:	b29e      	uxth	r6, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff ff9a 	bl	80061bc <makeFreeRtosPriority>
 8006288:	4602      	mov	r2, r0
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	9200      	str	r2, [sp, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	4632      	mov	r2, r6
 8006296:	4629      	mov	r1, r5
 8006298:	4620      	mov	r0, r4
 800629a:	f000 ff78 	bl	800718e <xTaskCreate>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <osDelay+0x16>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e000      	b.n	80062ca <osDelay+0x18>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 f88c 	bl	80073e8 <vTaskDelay>
  
  return osOK;
 80062d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4619      	mov	r1, r3
 80062f0:	2001      	movs	r0, #1
 80062f2:	f000 faa7 	bl	8006844 <xQueueCreateMutexStatic>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e003      	b.n	8006302 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80062fa:	2001      	movs	r0, #1
 80062fc:	f000 fa8a 	bl	8006814 <xQueueCreateMutex>
 8006300:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <osMutexWait+0x18>
    return osErrorParameter;
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	e03a      	b.n	800639a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632e:	d103      	bne.n	8006338 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e009      	b.n	800634c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <osMutexWait+0x40>
      ticks = 1;
 8006348:	2301      	movs	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800634c:	f7ff ff4d 	bl	80061ea <inHandlerMode>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d017      	beq.n	8006386 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	461a      	mov	r2, r3
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fd18 	bl	8006d94 <xQueueReceiveFromISR>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <osMutexWait+0x62>
      return osErrorOS;
 800636a:	23ff      	movs	r3, #255	; 0xff
 800636c:	e015      	b.n	800639a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <osMutexWait+0x8c>
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <osMutexWait+0x98>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e008      	b.n	8006398 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fbfb 	bl	8006b84 <xQueueSemaphoreTake>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <osMutexWait+0x8c>
    return osErrorOS;
 8006394:	23ff      	movs	r3, #255	; 0xff
 8006396:	e000      	b.n	800639a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80063b8:	f7ff ff17 	bl	80061ea <inHandlerMode>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb51 	bl	8006a70 <xQueueGiveFromISR>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <osMutexRelease+0x30>
      return osErrorOS;
 80063d4:	23ff      	movs	r3, #255	; 0xff
 80063d6:	e017      	b.n	8006408 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d013      	beq.n	8006406 <osMutexRelease+0x5e>
 80063de:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <osMutexRelease+0x68>)
 80063e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	e00a      	b.n	8006406 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80063f0:	2300      	movs	r3, #0
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa40 	bl	800687c <xQueueGenericSend>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d001      	beq.n	8006406 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006402:	23ff      	movs	r3, #255	; 0xff
 8006404:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006406:	68fb      	ldr	r3, [r7, #12]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 0208 	add.w	r2, r3, #8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f103 0208 	add.w	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0208 	add.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c6:	d103      	bne.n	80064d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e00c      	b.n	80064ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3308      	adds	r3, #8
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e002      	b.n	80064de <vListInsert+0x2e>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d2f6      	bcs.n	80064d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6852      	ldr	r2, [r2, #4]
 8006540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d103      	bne.n	8006554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
	...

08006574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	e7fe      	b.n	800659a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800659c:	f001 fe7c 	bl	8008298 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	3b01      	subs	r3, #1
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	441a      	add	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	22ff      	movs	r2, #255	; 0xff
 80065e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d114      	bne.n	800661c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01a      	beq.n	8006630 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f968 	bl	80078d4 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d012      	beq.n	8006630 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <xQueueGenericReset+0xcc>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	e009      	b.n	8006630 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3310      	adds	r3, #16
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fef7 	bl	8006414 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3324      	adds	r3, #36	; 0x24
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fef2 	bl	8006414 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006630:	f001 fe60 	bl	80082f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006634:	2301      	movs	r3, #1
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08e      	sub	sp, #56	; 0x38
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <xQueueGenericCreateStatic+0x28>
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
 800666a:	e7fe      	b.n	800666a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <xQueueGenericCreateStatic+0x42>
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
 8006684:	e7fe      	b.n	8006684 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <xQueueGenericCreateStatic+0x4e>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <xQueueGenericCreateStatic+0x52>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <xQueueGenericCreateStatic+0x54>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <xQueueGenericCreateStatic+0x6c>
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e7fe      	b.n	80066ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <xQueueGenericCreateStatic+0x78>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <xQueueGenericCreateStatic+0x7c>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <xQueueGenericCreateStatic+0x7e>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <xQueueGenericCreateStatic+0x96>
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066da:	2348      	movs	r3, #72	; 0x48
 80066dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b48      	cmp	r3, #72	; 0x48
 80066e2:	d009      	beq.n	80066f8 <xQueueGenericCreateStatic+0xb4>
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e7fe      	b.n	80066f6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800670a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4613      	mov	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f842 	bl	80067a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006720:	4618      	mov	r0, r3
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <xQueueGenericCreate+0x28>
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e7fe      	b.n	800674e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e004      	b.n	8006766 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	fb02 f303 	mul.w	r3, r2, r3
 8006764:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3348      	adds	r3, #72	; 0x48
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fe8a 	bl	8008484 <pvPortMalloc>
 8006770:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3348      	adds	r3, #72	; 0x48
 800677c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006786:	79fa      	ldrb	r2, [r7, #7]
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f805 	bl	80067a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006798:	69bb      	ldr	r3, [r7, #24]
	}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e002      	b.n	80067c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067d0:	2101      	movs	r1, #1
 80067d2:	69b8      	ldr	r0, [r7, #24]
 80067d4:	f7ff fece 	bl	8006574 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006800:	2300      	movs	r3, #0
 8006802:	2200      	movs	r2, #0
 8006804:	2100      	movs	r1, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f838 	bl	800687c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	461a      	mov	r2, r3
 800682a:	6939      	ldr	r1, [r7, #16]
 800682c:	6978      	ldr	r0, [r7, #20]
 800682e:	f7ff ff7b 	bl	8006728 <xQueueGenericCreate>
 8006832:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff ffd3 	bl	80067e0 <prvInitialiseMutex>

		return pxNewQueue;
 800683a:	68fb      	ldr	r3, [r7, #12]
	}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	6939      	ldr	r1, [r7, #16]
 8006862:	6978      	ldr	r0, [r7, #20]
 8006864:	f7ff feee 	bl	8006644 <xQueueGenericCreateStatic>
 8006868:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff ffb8 	bl	80067e0 <prvInitialiseMutex>

		return pxNewQueue;
 8006870:	68fb      	ldr	r3, [r7, #12]
	}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <xQueueGenericSend+0x30>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	e7fe      	b.n	80068aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <xQueueGenericSend+0x3e>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xQueueGenericSend+0x42>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueGenericSend+0x44>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <xQueueGenericSend+0x5c>
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	e7fe      	b.n	80068d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d103      	bne.n	80068e6 <xQueueGenericSend+0x6a>
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <xQueueGenericSend+0x6e>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueGenericSend+0x70>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <xQueueGenericSend+0x88>
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	e7fe      	b.n	8006902 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006904:	f001 f9a0 	bl	8007c48 <xTaskGetSchedulerState>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <xQueueGenericSend+0x98>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <xQueueGenericSend+0x9c>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <xQueueGenericSend+0x9e>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <xQueueGenericSend+0xb6>
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	e7fe      	b.n	8006930 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006932:	f001 fcb1 	bl	8008298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <xQueueGenericSend+0xcc>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d129      	bne.n	800699c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694e:	f000 fab5 	bl	8006ebc <prvCopyDataToQueue>
 8006952:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	3324      	adds	r3, #36	; 0x24
 8006960:	4618      	mov	r0, r3
 8006962:	f000 ffb7 	bl	80078d4 <xTaskRemoveFromEventList>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800696c:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <xQueueGenericSend+0x1f0>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	e00a      	b.n	8006994 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006984:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <xQueueGenericSend+0x1f0>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006994:	f001 fcae 	bl	80082f4 <vPortExitCritical>
				return pdPASS;
 8006998:	2301      	movs	r3, #1
 800699a:	e063      	b.n	8006a64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069a2:	f001 fca7 	bl	80082f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e05c      	b.n	8006a64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 ffef 	bl	8007998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069be:	f001 fc99 	bl	80082f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069c2:	f000 fda3 	bl	800750c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069c6:	f001 fc67 	bl	8008298 <vPortEnterCritical>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d6:	d103      	bne.n	80069e0 <xQueueGenericSend+0x164>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e6:	b25b      	sxtb	r3, r3
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSend+0x17a>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f6:	f001 fc7d 	bl	80082f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069fa:	1d3a      	adds	r2, r7, #4
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 ffde 	bl	80079c4 <xTaskCheckForTimeOut>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d124      	bne.n	8006a58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a10:	f000 fb4c 	bl	80070ac <prvIsQueueFull>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 ff32 	bl	800788c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a2a:	f000 fad7 	bl	8006fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a2e:	f000 fd7b 	bl	8007528 <xTaskResumeAll>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f47f af7c 	bne.w	8006932 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <xQueueGenericSend+0x1f0>)
 8006a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	e772      	b.n	8006932 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4e:	f000 fac5 	bl	8006fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a52:	f000 fd69 	bl	8007528 <xTaskResumeAll>
 8006a56:	e76c      	b.n	8006932 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5a:	f000 fabf 	bl	8006fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a5e:	f000 fd63 	bl	8007528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a62:	2300      	movs	r3, #0
		}
	}
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3738      	adds	r7, #56	; 0x38
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <xQueueGiveFromISR+0x28>
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	e7fe      	b.n	8006a96 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d009      	beq.n	8006ab4 <xQueueGiveFromISR+0x44>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	e7fe      	b.n	8006ab2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <xQueueGiveFromISR+0x54>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <xQueueGiveFromISR+0x58>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <xQueueGiveFromISR+0x5a>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <xQueueGiveFromISR+0x72>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ae2:	f001 fc93 	bl	800840c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	617a      	str	r2, [r7, #20]
 8006afc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006afe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d22b      	bcs.n	8006b6a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b2c:	d112      	bne.n	8006b54 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	3324      	adds	r3, #36	; 0x24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 feca 	bl	80078d4 <xTaskRemoveFromEventList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e007      	b.n	8006b64 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	b25a      	sxtb	r2, r3
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
 8006b68:	e001      	b.n	8006b6e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3738      	adds	r7, #56	; 0x38
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	623b      	str	r3, [r7, #32]
 8006bb2:	e7fe      	b.n	8006bb2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <xQueueSemaphoreTake+0x4c>
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e7fe      	b.n	8006bce <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd0:	f001 f83a 	bl	8007c48 <xTaskGetSchedulerState>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <xQueueSemaphoreTake+0x5c>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <xQueueSemaphoreTake+0x60>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <xQueueSemaphoreTake+0x62>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <xQueueSemaphoreTake+0x7a>
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e7fe      	b.n	8006bfc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bfe:	f001 fb4b 	bl	8008298 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d024      	beq.n	8006c58 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	1e5a      	subs	r2, r3, #1
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c1e:	f001 f9d9 	bl	8007fd4 <pvTaskIncrementMutexHeldCount>
 8006c22:	4602      	mov	r2, r0
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00f      	beq.n	8006c50 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	3310      	adds	r3, #16
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fe4d 	bl	80078d4 <xTaskRemoveFromEventList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c40:	4b53      	ldr	r3, [pc, #332]	; (8006d90 <xQueueSemaphoreTake+0x20c>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c50:	f001 fb50 	bl	80082f4 <vPortExitCritical>
				return pdPASS;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e096      	b.n	8006d86 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <xQueueSemaphoreTake+0xf4>
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e7fe      	b.n	8006c76 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c78:	f001 fb3c 	bl	80082f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e082      	b.n	8006d86 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c86:	f107 030c 	add.w	r3, r7, #12
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fe84 	bl	8007998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c94:	f001 fb2e 	bl	80082f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c98:	f000 fc38 	bl	800750c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c9c:	f001 fafc 	bl	8008298 <vPortEnterCritical>
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cac:	d103      	bne.n	8006cb6 <xQueueSemaphoreTake+0x132>
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc2:	d103      	bne.n	8006ccc <xQueueSemaphoreTake+0x148>
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ccc:	f001 fb12 	bl	80082f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd0:	463a      	mov	r2, r7
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fe73 	bl	80079c4 <xTaskCheckForTimeOut>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d132      	bne.n	8006d4a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce6:	f000 f9cb 	bl	8007080 <prvIsQueueEmpty>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d026      	beq.n	8006d3e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d109      	bne.n	8006d0c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006cf8:	f001 face 	bl	8008298 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 ffbf 	bl	8007c84 <xTaskPriorityInherit>
 8006d06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d08:	f001 faf4 	bl	80082f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fdb9 	bl	800788c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d1c:	f000 f95e 	bl	8006fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d20:	f000 fc02 	bl	8007528 <xTaskResumeAll>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f47f af69 	bne.w	8006bfe <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006d2c:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <xQueueSemaphoreTake+0x20c>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	e75f      	b.n	8006bfe <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d40:	f000 f94c 	bl	8006fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d44:	f000 fbf0 	bl	8007528 <xTaskResumeAll>
 8006d48:	e759      	b.n	8006bfe <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d4c:	f000 f946 	bl	8006fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d50:	f000 fbea 	bl	8007528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d56:	f000 f993 	bl	8007080 <prvIsQueueEmpty>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f43f af4e 	beq.w	8006bfe <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00d      	beq.n	8006d84 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006d68:	f001 fa96 	bl	8008298 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d6e:	f000 f88e 	bl	8006e8e <prvGetDisinheritPriorityAfterTimeout>
 8006d72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f88c 	bl	8007e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d80:	f001 fab8 	bl	80082f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3738      	adds	r7, #56	; 0x38
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08e      	sub	sp, #56	; 0x38
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <xQueueReceiveFromISR+0x2a>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	623b      	str	r3, [r7, #32]
 8006dbc:	e7fe      	b.n	8006dbc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <xQueueReceiveFromISR+0x38>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <xQueueReceiveFromISR+0x3c>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <xQueueReceiveFromISR+0x3e>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <xQueueReceiveFromISR+0x56>
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e7fe      	b.n	8006de8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dea:	f001 fb0f 	bl	800840c <vPortValidateInterruptPriority>
	__asm volatile
 8006dee:	f3ef 8211 	mrs	r2, BASEPRI
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	61ba      	str	r2, [r7, #24]
 8006e04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d02f      	beq.n	8006e76 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e24:	f000 f8b4 	bl	8006f90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	1e5a      	subs	r2, r3, #1
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d112      	bne.n	8006e60 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d016      	beq.n	8006e70 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	3310      	adds	r3, #16
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fd44 	bl	80078d4 <xTaskRemoveFromEventList>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e007      	b.n	8006e70 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	b25a      	sxtb	r2, r3
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e70:	2301      	movs	r3, #1
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	e001      	b.n	8006e7a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3738      	adds	r7, #56	; 0x38
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1c3 0307 	rsb	r3, r3, #7
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e001      	b.n	8006eb0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
	}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10d      	bne.n	8006ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d14d      	bne.n	8006f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 ff52 	bl	8007d90 <xTaskPriorityDisinherit>
 8006eec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	e043      	b.n	8006f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d119      	bne.n	8006f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6898      	ldr	r0, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	461a      	mov	r2, r3
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	f001 fde6 	bl	8008ad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d32b      	bcc.n	8006f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	609a      	str	r2, [r3, #8]
 8006f2e:	e026      	b.n	8006f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68d8      	ldr	r0, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	f001 fdcc 	bl	8008ad8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	425b      	negs	r3, r3
 8006f4a:	441a      	add	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d207      	bcs.n	8006f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	425b      	negs	r3, r3
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d105      	bne.n	8006f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	441a      	add	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d303      	bcc.n	8006fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68d9      	ldr	r1, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6838      	ldr	r0, [r7, #0]
 8006fd0:	f001 fd82 	bl	8008ad8 <memcpy>
	}
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fe4:	f001 f958 	bl	8008298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ff0:	e011      	b.n	8007016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d012      	beq.n	8007020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3324      	adds	r3, #36	; 0x24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fc68 	bl	80078d4 <xTaskRemoveFromEventList>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800700a:	f000 fd3b 	bl	8007a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	3b01      	subs	r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	dce9      	bgt.n	8006ff2 <prvUnlockQueue+0x16>
 800701e:	e000      	b.n	8007022 <prvUnlockQueue+0x46>
					break;
 8007020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800702a:	f001 f963 	bl	80082f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800702e:	f001 f933 	bl	8008298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800703a:	e011      	b.n	8007060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d012      	beq.n	800706a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3310      	adds	r3, #16
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fc43 	bl	80078d4 <xTaskRemoveFromEventList>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007054:	f000 fd16 	bl	8007a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	3b01      	subs	r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dce9      	bgt.n	800703c <prvUnlockQueue+0x60>
 8007068:	e000      	b.n	800706c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800706a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22ff      	movs	r2, #255	; 0xff
 8007070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007074:	f001 f93e 	bl	80082f4 <vPortExitCritical>
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007088:	f001 f906 	bl	8008298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e001      	b.n	800709e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800709e:	f001 f929 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070b4:	f001 f8f0 	bl	8008298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d102      	bne.n	80070ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e001      	b.n	80070ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ce:	f001 f911 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 80070d2:	68fb      	ldr	r3, [r7, #12]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	; 0x38
 80070e0:	af04      	add	r7, sp, #16
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <xTaskCreateStatic+0x28>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	623b      	str	r3, [r7, #32]
 8007102:	e7fe      	b.n	8007102 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <xTaskCreateStatic+0x42>
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e7fe      	b.n	800711c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800711e:	2354      	movs	r3, #84	; 0x54
 8007120:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b54      	cmp	r3, #84	; 0x54
 8007126:	d009      	beq.n	800713c <xTaskCreateStatic+0x60>
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e7fe      	b.n	800713a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01e      	beq.n	8007180 <xTaskCreateStatic+0xa4>
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01b      	beq.n	8007180 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800715a:	2300      	movs	r3, #0
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	9302      	str	r3, [sp, #8]
 8007162:	f107 0314 	add.w	r3, r7, #20
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 f850 	bl	8007218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800717a:	f000 f8cb 	bl	8007314 <prvAddNewTaskToReadyList>
 800717e:	e001      	b.n	8007184 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007184:	697b      	ldr	r3, [r7, #20]
	}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800718e:	b580      	push	{r7, lr}
 8007190:	b08c      	sub	sp, #48	; 0x30
 8007192:	af04      	add	r7, sp, #16
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f96e 	bl	8008484 <pvPortMalloc>
 80071a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80071b0:	2054      	movs	r0, #84	; 0x54
 80071b2:	f001 f967 	bl	8008484 <pvPortMalloc>
 80071b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
 80071c4:	e005      	b.n	80071d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071c6:	6978      	ldr	r0, [r7, #20]
 80071c8:	f001 fa1e 	bl	8008608 <vPortFree>
 80071cc:	e001      	b.n	80071d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d017      	beq.n	8007208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9303      	str	r3, [sp, #12]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	9302      	str	r3, [sp, #8]
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f80e 	bl	8007218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071fc:	69f8      	ldr	r0, [r7, #28]
 80071fe:	f000 f889 	bl	8007314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007202:	2301      	movs	r3, #1
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e002      	b.n	800720e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800720c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800720e:	69bb      	ldr	r3, [r7, #24]
	}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007230:	3b01      	subs	r3, #1
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <prvInitialiseNewTask+0x46>
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	e7fe      	b.n	800725c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	e012      	b.n	800728a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	7819      	ldrb	r1, [r3, #0]
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	3334      	adds	r3, #52	; 0x34
 8007274:	460a      	mov	r2, r1
 8007276:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3301      	adds	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b0f      	cmp	r3, #15
 800728e:	d9e9      	bls.n	8007264 <prvInitialiseNewTask+0x4c>
 8007290:	e000      	b.n	8007294 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007292:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b06      	cmp	r3, #6
 80072a0:	d901      	bls.n	80072a6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072a2:	2306      	movs	r3, #6
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2200      	movs	r2, #0
 80072b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	3304      	adds	r3, #4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff f8c8 	bl	8006452 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	3318      	adds	r3, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff f8c3 	bl	8006452 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	f1c3 0207 	rsb	r2, r3, #7
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	2200      	movs	r2, #0
 80072e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	69b8      	ldr	r0, [r7, #24]
 80072f6:	f000 fee7 	bl	80080c8 <pxPortInitialiseStack>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730c:	bf00      	nop
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800731c:	f000 ffbc 	bl	8008298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <prvAddNewTaskToReadyList+0xb8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	4a29      	ldr	r2, [pc, #164]	; (80073cc <prvAddNewTaskToReadyList+0xb8>)
 8007328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <prvAddNewTaskToReadyList+0xbc>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007332:	4a27      	ldr	r2, [pc, #156]	; (80073d0 <prvAddNewTaskToReadyList+0xbc>)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007338:	4b24      	ldr	r3, [pc, #144]	; (80073cc <prvAddNewTaskToReadyList+0xb8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d110      	bne.n	8007362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007340:	f000 fbc4 	bl	8007acc <prvInitialiseTaskLists>
 8007344:	e00d      	b.n	8007362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007346:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <prvAddNewTaskToReadyList+0xc0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800734e:	4b20      	ldr	r3, [pc, #128]	; (80073d0 <prvAddNewTaskToReadyList+0xbc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	429a      	cmp	r2, r3
 800735a:	d802      	bhi.n	8007362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <prvAddNewTaskToReadyList+0xbc>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007362:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <prvAddNewTaskToReadyList+0xc4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <prvAddNewTaskToReadyList+0xc4>)
 800736a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <prvAddNewTaskToReadyList+0xc8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4313      	orrs	r3, r2
 800737a:	4a18      	ldr	r2, [pc, #96]	; (80073dc <prvAddNewTaskToReadyList+0xc8>)
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <prvAddNewTaskToReadyList+0xcc>)
 800738c:	441a      	add	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f7ff f868 	bl	800646a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800739a:	f000 ffab 	bl	80082f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <prvAddNewTaskToReadyList+0xc0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00e      	beq.n	80073c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <prvAddNewTaskToReadyList+0xbc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d207      	bcs.n	80073c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <prvAddNewTaskToReadyList+0xd0>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20000744 	.word	0x20000744
 80073d0:	20000644 	.word	0x20000644
 80073d4:	20000750 	.word	0x20000750
 80073d8:	20000760 	.word	0x20000760
 80073dc:	2000074c 	.word	0x2000074c
 80073e0:	20000648 	.word	0x20000648
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d016      	beq.n	8007428 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <vTaskDelay+0x60>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <vTaskDelay+0x2e>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	e7fe      	b.n	8007414 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007416:	f000 f879 	bl	800750c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800741a:	2100      	movs	r1, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fded 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007422:	f000 f881 	bl	8007528 <xTaskResumeAll>
 8007426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <vTaskDelay+0x64>)
 8007430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	2000076c 	.word	0x2000076c
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800745e:	463a      	mov	r2, r7
 8007460:	1d39      	adds	r1, r7, #4
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	4618      	mov	r0, r3
 8007468:	f7fc f880 	bl	800356c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	9202      	str	r2, [sp, #8]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	2300      	movs	r3, #0
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	460a      	mov	r2, r1
 800747e:	491d      	ldr	r1, [pc, #116]	; (80074f4 <vTaskStartScheduler+0xa4>)
 8007480:	481d      	ldr	r0, [pc, #116]	; (80074f8 <vTaskStartScheduler+0xa8>)
 8007482:	f7ff fe2b 	bl	80070dc <xTaskCreateStatic>
 8007486:	4602      	mov	r2, r0
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <vTaskStartScheduler+0xac>)
 800748a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800748c:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <vTaskStartScheduler+0xac>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e001      	b.n	800749e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d115      	bne.n	80074d0 <vTaskStartScheduler+0x80>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <vTaskStartScheduler+0xb0>)
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <vTaskStartScheduler+0xb4>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <vTaskStartScheduler+0xb8>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074ca:	f000 fe75 	bl	80081b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074ce:	e00d      	b.n	80074ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d6:	d109      	bne.n	80074ec <vTaskStartScheduler+0x9c>
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e7fe      	b.n	80074ea <vTaskStartScheduler+0x9a>
}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	08008ec8 	.word	0x08008ec8
 80074f8:	08007a9d 	.word	0x08007a9d
 80074fc:	20000768 	.word	0x20000768
 8007500:	20000764 	.word	0x20000764
 8007504:	20000750 	.word	0x20000750
 8007508:	20000748 	.word	0x20000748

0800750c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <vTaskSuspendAll+0x18>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a03      	ldr	r2, [pc, #12]	; (8007524 <vTaskSuspendAll+0x18>)
 8007518:	6013      	str	r3, [r2, #0]
}
 800751a:	bf00      	nop
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	2000076c 	.word	0x2000076c

08007528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007536:	4b41      	ldr	r3, [pc, #260]	; (800763c <xTaskResumeAll+0x114>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <xTaskResumeAll+0x2a>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	e7fe      	b.n	8007550 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007552:	f000 fea1 	bl	8008298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <xTaskResumeAll+0x114>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3b01      	subs	r3, #1
 800755c:	4a37      	ldr	r2, [pc, #220]	; (800763c <xTaskResumeAll+0x114>)
 800755e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007560:	4b36      	ldr	r3, [pc, #216]	; (800763c <xTaskResumeAll+0x114>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d161      	bne.n	800762c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007568:	4b35      	ldr	r3, [pc, #212]	; (8007640 <xTaskResumeAll+0x118>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05d      	beq.n	800762c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007570:	e02e      	b.n	80075d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007572:	4b34      	ldr	r3, [pc, #208]	; (8007644 <xTaskResumeAll+0x11c>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3318      	adds	r3, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe ffce 	bl	8006520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe ffc9 	bl	8006520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	2201      	movs	r2, #1
 8007594:	409a      	lsls	r2, r3
 8007596:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <xTaskResumeAll+0x120>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	4a2a      	ldr	r2, [pc, #168]	; (8007648 <xTaskResumeAll+0x120>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a27      	ldr	r2, [pc, #156]	; (800764c <xTaskResumeAll+0x124>)
 80075ae:	441a      	add	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe ff57 	bl	800646a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4b23      	ldr	r3, [pc, #140]	; (8007650 <xTaskResumeAll+0x128>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d302      	bcc.n	80075d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80075ca:	4b22      	ldr	r3, [pc, #136]	; (8007654 <xTaskResumeAll+0x12c>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d0:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <xTaskResumeAll+0x11c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1cc      	bne.n	8007572 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075de:	f000 fb0f 	bl	8007c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80075e2:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <xTaskResumeAll+0x130>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075ee:	f000 f837 	bl	8007660 <xTaskIncrementTick>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80075f8:	4b16      	ldr	r3, [pc, #88]	; (8007654 <xTaskResumeAll+0x12c>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3b01      	subs	r3, #1
 8007602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f1      	bne.n	80075ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <xTaskResumeAll+0x130>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <xTaskResumeAll+0x12c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <xTaskResumeAll+0x134>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800762c:	f000 fe62 	bl	80082f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007630:	68bb      	ldr	r3, [r7, #8]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000076c 	.word	0x2000076c
 8007640:	20000744 	.word	0x20000744
 8007644:	20000704 	.word	0x20000704
 8007648:	2000074c 	.word	0x2000074c
 800764c:	20000648 	.word	0x20000648
 8007650:	20000644 	.word	0x20000644
 8007654:	20000758 	.word	0x20000758
 8007658:	20000754 	.word	0x20000754
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766a:	4b50      	ldr	r3, [pc, #320]	; (80077ac <xTaskIncrementTick+0x14c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 808c 	bne.w	800778c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007674:	4b4e      	ldr	r3, [pc, #312]	; (80077b0 <xTaskIncrementTick+0x150>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800767c:	4a4c      	ldr	r2, [pc, #304]	; (80077b0 <xTaskIncrementTick+0x150>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11f      	bne.n	80076c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007688:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <xTaskIncrementTick+0x154>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <xTaskIncrementTick+0x46>
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	e7fe      	b.n	80076a4 <xTaskIncrementTick+0x44>
 80076a6:	4b43      	ldr	r3, [pc, #268]	; (80077b4 <xTaskIncrementTick+0x154>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	4b42      	ldr	r3, [pc, #264]	; (80077b8 <xTaskIncrementTick+0x158>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a40      	ldr	r2, [pc, #256]	; (80077b4 <xTaskIncrementTick+0x154>)
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <xTaskIncrementTick+0x158>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b40      	ldr	r3, [pc, #256]	; (80077bc <xTaskIncrementTick+0x15c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3301      	adds	r3, #1
 80076c0:	4a3e      	ldr	r2, [pc, #248]	; (80077bc <xTaskIncrementTick+0x15c>)
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	f000 fa9c 	bl	8007c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076c8:	4b3d      	ldr	r3, [pc, #244]	; (80077c0 <xTaskIncrementTick+0x160>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d34d      	bcc.n	800776e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d2:	4b38      	ldr	r3, [pc, #224]	; (80077b4 <xTaskIncrementTick+0x154>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <xTaskIncrementTick+0x80>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <xTaskIncrementTick+0x82>
 80076e0:	2300      	movs	r3, #0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e6:	4b36      	ldr	r3, [pc, #216]	; (80077c0 <xTaskIncrementTick+0x160>)
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ec:	601a      	str	r2, [r3, #0]
					break;
 80076ee:	e03e      	b.n	800776e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076f0:	4b30      	ldr	r3, [pc, #192]	; (80077b4 <xTaskIncrementTick+0x154>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d203      	bcs.n	8007710 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007708:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <xTaskIncrementTick+0x160>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6013      	str	r3, [r2, #0]
						break;
 800770e:	e02e      	b.n	800776e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3304      	adds	r3, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe ff03 	bl	8006520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3318      	adds	r3, #24
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fefa 	bl	8006520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	2201      	movs	r2, #1
 8007732:	409a      	lsls	r2, r3
 8007734:	4b23      	ldr	r3, [pc, #140]	; (80077c4 <xTaskIncrementTick+0x164>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <xTaskIncrementTick+0x164>)
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a1f      	ldr	r2, [pc, #124]	; (80077c8 <xTaskIncrementTick+0x168>)
 800774c:	441a      	add	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3304      	adds	r3, #4
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7fe fe88 	bl	800646a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <xTaskIncrementTick+0x16c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	429a      	cmp	r2, r3
 8007766:	d3b4      	bcc.n	80076d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800776c:	e7b1      	b.n	80076d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <xTaskIncrementTick+0x16c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4914      	ldr	r1, [pc, #80]	; (80077c8 <xTaskIncrementTick+0x168>)
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d907      	bls.n	8007796 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007786:	2301      	movs	r3, #1
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e004      	b.n	8007796 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800778c:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <xTaskIncrementTick+0x170>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a0f      	ldr	r2, [pc, #60]	; (80077d0 <xTaskIncrementTick+0x170>)
 8007794:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007796:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <xTaskIncrementTick+0x174>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077a2:	697b      	ldr	r3, [r7, #20]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000076c 	.word	0x2000076c
 80077b0:	20000748 	.word	0x20000748
 80077b4:	200006fc 	.word	0x200006fc
 80077b8:	20000700 	.word	0x20000700
 80077bc:	2000075c 	.word	0x2000075c
 80077c0:	20000764 	.word	0x20000764
 80077c4:	2000074c 	.word	0x2000074c
 80077c8:	20000648 	.word	0x20000648
 80077cc:	20000644 	.word	0x20000644
 80077d0:	20000754 	.word	0x20000754
 80077d4:	20000758 	.word	0x20000758

080077d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <vTaskSwitchContext+0xa0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077e6:	4b25      	ldr	r3, [pc, #148]	; (800787c <vTaskSwitchContext+0xa4>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077ec:	e03e      	b.n	800786c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <vTaskSwitchContext+0xa4>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <vTaskSwitchContext+0xa8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	fab3 f383 	clz	r3, r3
 8007800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	f1c3 031f 	rsb	r3, r3, #31
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	491e      	ldr	r1, [pc, #120]	; (8007884 <vTaskSwitchContext+0xac>)
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <vTaskSwitchContext+0x5a>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	e7fe      	b.n	8007830 <vTaskSwitchContext+0x58>
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a11      	ldr	r2, [pc, #68]	; (8007884 <vTaskSwitchContext+0xac>)
 800783e:	4413      	add	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3308      	adds	r3, #8
 8007854:	429a      	cmp	r2, r3
 8007856:	d104      	bne.n	8007862 <vTaskSwitchContext+0x8a>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	605a      	str	r2, [r3, #4]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4a07      	ldr	r2, [pc, #28]	; (8007888 <vTaskSwitchContext+0xb0>)
 800786a:	6013      	str	r3, [r2, #0]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000076c 	.word	0x2000076c
 800787c:	20000758 	.word	0x20000758
 8007880:	2000074c 	.word	0x2000074c
 8007884:	20000648 	.word	0x20000648
 8007888:	20000644 	.word	0x20000644

0800788c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <vTaskPlaceOnEventList+0x24>
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e7fe      	b.n	80078ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <vTaskPlaceOnEventList+0x44>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3318      	adds	r3, #24
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fe fdf9 	bl	80064b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078be:	2101      	movs	r1, #1
 80078c0:	6838      	ldr	r0, [r7, #0]
 80078c2:	f000 fb9b 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000644 	.word	0x20000644

080078d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <xTaskRemoveFromEventList+0x2a>
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e7fe      	b.n	80078fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3318      	adds	r3, #24
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fe0c 	bl	8006520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <xTaskRemoveFromEventList+0xac>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11c      	bne.n	800794a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	3304      	adds	r3, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fe03 	bl	8006520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	2201      	movs	r2, #1
 8007920:	409a      	lsls	r2, r3
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <xTaskRemoveFromEventList+0xb0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4313      	orrs	r3, r2
 8007928:	4a16      	ldr	r2, [pc, #88]	; (8007984 <xTaskRemoveFromEventList+0xb0>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a13      	ldr	r2, [pc, #76]	; (8007988 <xTaskRemoveFromEventList+0xb4>)
 800793a:	441a      	add	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fd91 	bl	800646a <vListInsertEnd>
 8007948:	e005      	b.n	8007956 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	3318      	adds	r3, #24
 800794e:	4619      	mov	r1, r3
 8007950:	480e      	ldr	r0, [pc, #56]	; (800798c <xTaskRemoveFromEventList+0xb8>)
 8007952:	f7fe fd8a 	bl	800646a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <xTaskRemoveFromEventList+0xbc>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	429a      	cmp	r2, r3
 8007962:	d905      	bls.n	8007970 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007968:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <xTaskRemoveFromEventList+0xc0>)
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e001      	b.n	8007974 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007974:	697b      	ldr	r3, [r7, #20]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	2000076c 	.word	0x2000076c
 8007984:	2000074c 	.word	0x2000074c
 8007988:	20000648 	.word	0x20000648
 800798c:	20000704 	.word	0x20000704
 8007990:	20000644 	.word	0x20000644
 8007994:	20000758 	.word	0x20000758

08007998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <vTaskInternalSetTimeOutState+0x24>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <vTaskInternalSetTimeOutState+0x28>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	605a      	str	r2, [r3, #4]
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000075c 	.word	0x2000075c
 80079c0:	20000748 	.word	0x20000748

080079c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <xTaskCheckForTimeOut+0x24>
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	e7fe      	b.n	80079e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <xTaskCheckForTimeOut+0x3e>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e7fe      	b.n	8007a00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007a02:	f000 fc49 	bl	8008298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a06:	4b1d      	ldr	r3, [pc, #116]	; (8007a7c <xTaskCheckForTimeOut+0xb8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1e:	d102      	bne.n	8007a26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	e023      	b.n	8007a6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <xTaskCheckForTimeOut+0xbc>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d007      	beq.n	8007a42 <xTaskCheckForTimeOut+0x7e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d302      	bcc.n	8007a42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	e015      	b.n	8007a6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d20b      	bcs.n	8007a64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff9d 	bl	8007998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e004      	b.n	8007a6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a6e:	f000 fc41 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 8007a72:	69fb      	ldr	r3, [r7, #28]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20000748 	.word	0x20000748
 8007a80:	2000075c 	.word	0x2000075c

08007a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <vTaskMissedYield+0x14>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000758 	.word	0x20000758

08007a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aa4:	f000 f852 	bl	8007b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <prvIdleTask+0x28>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d9f9      	bls.n	8007aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <prvIdleTask+0x2c>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ac0:	e7f0      	b.n	8007aa4 <prvIdleTask+0x8>
 8007ac2:	bf00      	nop
 8007ac4:	20000648 	.word	0x20000648
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	e00c      	b.n	8007af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a12      	ldr	r2, [pc, #72]	; (8007b2c <prvInitialiseTaskLists+0x60>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fc94 	bl	8006414 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	d9ef      	bls.n	8007ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007af8:	480d      	ldr	r0, [pc, #52]	; (8007b30 <prvInitialiseTaskLists+0x64>)
 8007afa:	f7fe fc8b 	bl	8006414 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007afe:	480d      	ldr	r0, [pc, #52]	; (8007b34 <prvInitialiseTaskLists+0x68>)
 8007b00:	f7fe fc88 	bl	8006414 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b04:	480c      	ldr	r0, [pc, #48]	; (8007b38 <prvInitialiseTaskLists+0x6c>)
 8007b06:	f7fe fc85 	bl	8006414 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b0a:	480c      	ldr	r0, [pc, #48]	; (8007b3c <prvInitialiseTaskLists+0x70>)
 8007b0c:	f7fe fc82 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b10:	480b      	ldr	r0, [pc, #44]	; (8007b40 <prvInitialiseTaskLists+0x74>)
 8007b12:	f7fe fc7f 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <prvInitialiseTaskLists+0x78>)
 8007b18:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <prvInitialiseTaskLists+0x64>)
 8007b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <prvInitialiseTaskLists+0x7c>)
 8007b1e:	4a05      	ldr	r2, [pc, #20]	; (8007b34 <prvInitialiseTaskLists+0x68>)
 8007b20:	601a      	str	r2, [r3, #0]
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20000648 	.word	0x20000648
 8007b30:	200006d4 	.word	0x200006d4
 8007b34:	200006e8 	.word	0x200006e8
 8007b38:	20000704 	.word	0x20000704
 8007b3c:	20000718 	.word	0x20000718
 8007b40:	20000730 	.word	0x20000730
 8007b44:	200006fc 	.word	0x200006fc
 8007b48:	20000700 	.word	0x20000700

08007b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b52:	e019      	b.n	8007b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b54:	f000 fba0 	bl	8008298 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <prvCheckTasksWaitingTermination+0x4c>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fcdb 	bl	8006520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b6a:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <prvCheckTasksWaitingTermination+0x50>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <prvCheckTasksWaitingTermination+0x50>)
 8007b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b74:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <prvCheckTasksWaitingTermination+0x54>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <prvCheckTasksWaitingTermination+0x54>)
 8007b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b7e:	f000 fbb9 	bl	80082f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f80e 	bl	8007ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <prvCheckTasksWaitingTermination+0x54>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e1      	bne.n	8007b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000718 	.word	0x20000718
 8007b9c:	20000744 	.word	0x20000744
 8007ba0:	2000072c 	.word	0x2000072c

08007ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d108      	bne.n	8007bc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fd24 	bl	8008608 <vPortFree>
				vPortFree( pxTCB );
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fd21 	bl	8008608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bc6:	e017      	b.n	8007bf8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d103      	bne.n	8007bda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fd18 	bl	8008608 <vPortFree>
	}
 8007bd8:	e00e      	b.n	8007bf8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d009      	beq.n	8007bf8 <prvDeleteTCB+0x54>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e7fe      	b.n	8007bf6 <prvDeleteTCB+0x52>
	}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c06:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <prvResetNextTaskUnblockTime+0x40>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <prvResetNextTaskUnblockTime+0x14>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <prvResetNextTaskUnblockTime+0x16>
 8007c14:	2300      	movs	r3, #0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <prvResetNextTaskUnblockTime+0x44>)
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c22:	e008      	b.n	8007c36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c24:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <prvResetNextTaskUnblockTime+0x40>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	4a04      	ldr	r2, [pc, #16]	; (8007c44 <prvResetNextTaskUnblockTime+0x44>)
 8007c34:	6013      	str	r3, [r2, #0]
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr
 8007c40:	200006fc 	.word	0x200006fc
 8007c44:	20000764 	.word	0x20000764

08007c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <xTaskGetSchedulerState+0x34>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c56:	2301      	movs	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	e008      	b.n	8007c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5c:	4b08      	ldr	r3, [pc, #32]	; (8007c80 <xTaskGetSchedulerState+0x38>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c64:	2302      	movs	r3, #2
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	e001      	b.n	8007c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c6e:	687b      	ldr	r3, [r7, #4]
	}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20000750 	.word	0x20000750
 8007c80:	2000076c 	.word	0x2000076c

08007c84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d06e      	beq.n	8007d78 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <xTaskPriorityInherit+0x100>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d25e      	bcs.n	8007d66 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db06      	blt.n	8007cbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb0:	4b34      	ldr	r3, [pc, #208]	; (8007d84 <xTaskPriorityInherit+0x100>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	f1c3 0207 	rsb	r2, r3, #7
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6959      	ldr	r1, [r3, #20]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4a2e      	ldr	r2, [pc, #184]	; (8007d88 <xTaskPriorityInherit+0x104>)
 8007cd0:	4413      	add	r3, r2
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	d101      	bne.n	8007cda <xTaskPriorityInherit+0x56>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xTaskPriorityInherit+0x58>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d03a      	beq.n	8007d56 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fc1b 	bl	8006520 <uxListRemove>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d115      	bne.n	8007d1c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4924      	ldr	r1, [pc, #144]	; (8007d88 <xTaskPriorityInherit+0x104>)
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <xTaskPriorityInherit+0x98>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43da      	mvns	r2, r3
 8007d12:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <xTaskPriorityInherit+0x108>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4013      	ands	r3, r2
 8007d18:	4a1c      	ldr	r2, [pc, #112]	; (8007d8c <xTaskPriorityInherit+0x108>)
 8007d1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d1c:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <xTaskPriorityInherit+0x100>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <xTaskPriorityInherit+0x108>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <xTaskPriorityInherit+0x108>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <xTaskPriorityInherit+0x104>)
 8007d46:	441a      	add	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fb8b 	bl	800646a <vListInsertEnd>
 8007d54:	e004      	b.n	8007d60 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <xTaskPriorityInherit+0x100>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d60:	2301      	movs	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e008      	b.n	8007d78 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <xTaskPriorityInherit+0x100>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d201      	bcs.n	8007d78 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d78:	68fb      	ldr	r3, [r7, #12]
	}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000644 	.word	0x20000644
 8007d88:	20000648 	.word	0x20000648
 8007d8c:	2000074c 	.word	0x2000074c

08007d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d06c      	beq.n	8007e80 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007da6:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <xTaskPriorityDisinherit+0xfc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d009      	beq.n	8007dc4 <xTaskPriorityDisinherit+0x34>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e7fe      	b.n	8007dc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <xTaskPriorityDisinherit+0x50>
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	e7fe      	b.n	8007dde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d044      	beq.n	8007e80 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d140      	bne.n	8007e80 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fb8c 	bl	8006520 <uxListRemove>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d115      	bne.n	8007e3a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e12:	491f      	ldr	r1, [pc, #124]	; (8007e90 <xTaskPriorityDisinherit+0x100>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xTaskPriorityDisinherit+0xaa>
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	2201      	movs	r2, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43da      	mvns	r2, r3
 8007e30:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <xTaskPriorityDisinherit+0x104>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4013      	ands	r3, r2
 8007e36:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <xTaskPriorityDisinherit+0x104>)
 8007e38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	f1c3 0207 	rsb	r2, r3, #7
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	2201      	movs	r2, #1
 8007e54:	409a      	lsls	r2, r3
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <xTaskPriorityDisinherit+0x104>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <xTaskPriorityDisinherit+0x104>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <xTaskPriorityDisinherit+0x100>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe faf7 	bl	800646a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e80:	697b      	ldr	r3, [r7, #20]
	}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000644 	.word	0x20000644
 8007e90:	20000648 	.word	0x20000648
 8007e94:	2000074c 	.word	0x2000074c

08007e98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8086 	beq.w	8007fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e7fe      	b.n	8007ecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d902      	bls.n	8007ede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e002      	b.n	8007ee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d067      	beq.n	8007fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d162      	bne.n	8007fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ef8:	4b33      	ldr	r3, [pc, #204]	; (8007fc8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d109      	bne.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	e7fe      	b.n	8007f14 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	db04      	blt.n	8007f34 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f1c3 0207 	rsb	r2, r3, #7
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	6959      	ldr	r1, [r3, #20]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f44:	4413      	add	r3, r2
 8007f46:	4299      	cmp	r1, r3
 8007f48:	d101      	bne.n	8007f4e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d034      	beq.n	8007fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fae1 	bl	8006520 <uxListRemove>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d115      	bne.n	8007f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4918      	ldr	r1, [pc, #96]	; (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	2201      	movs	r2, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	43da      	mvns	r2, r3
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	4a10      	ldr	r2, [pc, #64]	; (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f8e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	2201      	movs	r2, #1
 8007f96:	409a      	lsls	r2, r3
 8007f98:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007fb0:	441a      	add	r2, r3
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f7fe fa56 	bl	800646a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000644 	.word	0x20000644
 8007fcc:	20000648 	.word	0x20000648
 8007fd0:	2000074c 	.word	0x2000074c

08007fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fec:	681b      	ldr	r3, [r3, #0]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000644 	.word	0x20000644

08007ffc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008006:	4b29      	ldr	r3, [pc, #164]	; (80080ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800800c:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fa84 	bl	8006520 <uxListRemove>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800801e:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	2201      	movs	r2, #1
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	43da      	mvns	r2, r3
 800802c:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	4a20      	ldr	r2, [pc, #128]	; (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800803c:	d10a      	bne.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	481a      	ldr	r0, [pc, #104]	; (80080b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800804e:	f7fe fa0c 	bl	800646a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008052:	e026      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800805c:	4b14      	ldr	r3, [pc, #80]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d209      	bcs.n	8008080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806c:	4b13      	ldr	r3, [pc, #76]	; (80080bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3304      	adds	r3, #4
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f7fe fa19 	bl	80064b0 <vListInsert>
}
 800807e:	e010      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fe fa0f 	bl	80064b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d202      	bcs.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800809c:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6013      	str	r3, [r2, #0]
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000748 	.word	0x20000748
 80080b0:	20000644 	.word	0x20000644
 80080b4:	2000074c 	.word	0x2000074c
 80080b8:	20000730 	.word	0x20000730
 80080bc:	20000700 	.word	0x20000700
 80080c0:	200006fc 	.word	0x200006fc
 80080c4:	20000764 	.word	0x20000764

080080c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f8:	4a08      	ldr	r2, [pc, #32]	; (800811c <pxPortInitialiseStack+0x54>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b14      	subs	r3, #20
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b20      	subs	r3, #32
 800810e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	08008121 	.word	0x08008121

08008120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008126:	2300      	movs	r3, #0
 8008128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800812a:	4b10      	ldr	r3, [pc, #64]	; (800816c <prvTaskExitError+0x4c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008132:	d009      	beq.n	8008148 <prvTaskExitError+0x28>
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e7fe      	b.n	8008146 <prvTaskExitError+0x26>
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800815a:	bf00      	nop
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0fc      	beq.n	800815c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr
 800816c:	20000234 	.word	0x20000234

08008170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <pxCurrentTCBConst2>)
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800817a:	f380 8809 	msr	PSP, r0
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	f04e 0e0d 	orr.w	lr, lr, #13
 800818e:	4770      	bx	lr

08008190 <pxCurrentTCBConst2>:
 8008190:	20000644 	.word	0x20000644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008198:	4806      	ldr	r0, [pc, #24]	; (80081b4 <prvPortStartFirstTask+0x1c>)
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	6800      	ldr	r0, [r0, #0]
 800819e:	f380 8808 	msr	MSP, r0
 80081a2:	b662      	cpsie	i
 80081a4:	b661      	cpsie	f
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	df00      	svc	0
 80081b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081b2:	bf00      	nop
 80081b4:	e000ed08 	.word	0xe000ed08

080081b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081be:	4b31      	ldr	r3, [pc, #196]	; (8008284 <xPortStartScheduler+0xcc>)
 80081c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	22ff      	movs	r2, #255	; 0xff
 80081ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	4b29      	ldr	r3, [pc, #164]	; (8008288 <xPortStartScheduler+0xd0>)
 80081e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081e6:	4b29      	ldr	r3, [pc, #164]	; (800828c <xPortStartScheduler+0xd4>)
 80081e8:	2207      	movs	r2, #7
 80081ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ec:	e009      	b.n	8008202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80081ee:	4b27      	ldr	r3, [pc, #156]	; (800828c <xPortStartScheduler+0xd4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	4a25      	ldr	r2, [pc, #148]	; (800828c <xPortStartScheduler+0xd4>)
 80081f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820a:	2b80      	cmp	r3, #128	; 0x80
 800820c:	d0ef      	beq.n	80081ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800820e:	4b1f      	ldr	r3, [pc, #124]	; (800828c <xPortStartScheduler+0xd4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f1c3 0307 	rsb	r3, r3, #7
 8008216:	2b04      	cmp	r3, #4
 8008218:	d009      	beq.n	800822e <xPortStartScheduler+0x76>
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60bb      	str	r3, [r7, #8]
 800822c:	e7fe      	b.n	800822c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800822e:	4b17      	ldr	r3, [pc, #92]	; (800828c <xPortStartScheduler+0xd4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	4a15      	ldr	r2, [pc, #84]	; (800828c <xPortStartScheduler+0xd4>)
 8008236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008238:	4b14      	ldr	r3, [pc, #80]	; (800828c <xPortStartScheduler+0xd4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008240:	4a12      	ldr	r2, [pc, #72]	; (800828c <xPortStartScheduler+0xd4>)
 8008242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800824c:	4b10      	ldr	r3, [pc, #64]	; (8008290 <xPortStartScheduler+0xd8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0f      	ldr	r2, [pc, #60]	; (8008290 <xPortStartScheduler+0xd8>)
 8008252:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008258:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <xPortStartScheduler+0xd8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xPortStartScheduler+0xd8>)
 800825e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008264:	f000 f8b0 	bl	80083c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <xPortStartScheduler+0xdc>)
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800826e:	f7ff ff93 	bl	8008198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008272:	f7ff fab1 	bl	80077d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008276:	f7ff ff53 	bl	8008120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	e000e400 	.word	0xe000e400
 8008288:	20000770 	.word	0x20000770
 800828c:	20000774 	.word	0x20000774
 8008290:	e000ed20 	.word	0xe000ed20
 8008294:	20000234 	.word	0x20000234

08008298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <vPortEnterCritical+0x54>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a0d      	ldr	r2, [pc, #52]	; (80082ec <vPortEnterCritical+0x54>)
 80082b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <vPortEnterCritical+0x54>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d10e      	bne.n	80082e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <vPortEnterCritical+0x58>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d009      	beq.n	80082e0 <vPortEnterCritical+0x48>
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	e7fe      	b.n	80082de <vPortEnterCritical+0x46>
	}
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000234 	.word	0x20000234
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082fa:	4b10      	ldr	r3, [pc, #64]	; (800833c <vPortExitCritical+0x48>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <vPortExitCritical+0x22>
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	607b      	str	r3, [r7, #4]
 8008314:	e7fe      	b.n	8008314 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <vPortExitCritical+0x48>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3b01      	subs	r3, #1
 800831c:	4a07      	ldr	r2, [pc, #28]	; (800833c <vPortExitCritical+0x48>)
 800831e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <vPortExitCritical+0x48>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <vPortExitCritical+0x3e>
 8008328:	2300      	movs	r3, #0
 800832a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	20000234 	.word	0x20000234

08008340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008340:	f3ef 8009 	mrs	r0, PSP
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <pxCurrentTCBConst>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008350:	6010      	str	r0, [r2, #0]
 8008352:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008356:	f04f 0050 	mov.w	r0, #80	; 0x50
 800835a:	f380 8811 	msr	BASEPRI, r0
 800835e:	f7ff fa3b 	bl	80077d8 <vTaskSwitchContext>
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f380 8811 	msr	BASEPRI, r0
 800836a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008376:	f380 8809 	msr	PSP, r0
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	4770      	bx	lr

08008380 <pxCurrentTCBConst>:
 8008380:	20000644 	.word	0x20000644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083a0:	f7ff f95e 	bl	8007660 <xTaskIncrementTick>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083aa:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <SysTick_Handler+0x3c>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vPortSetupTimerInterrupt+0x30>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083d2:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <vPortSetupTimerInterrupt+0x34>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083d8:	4b09      	ldr	r3, [pc, #36]	; (8008400 <vPortSetupTimerInterrupt+0x38>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vPortSetupTimerInterrupt+0x3c>)
 80083de:	fba2 2303 	umull	r2, r3, r2, r3
 80083e2:	099b      	lsrs	r3, r3, #6
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <vPortSetupTimerInterrupt+0x40>)
 80083e6:	3b01      	subs	r3, #1
 80083e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ea:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <vPortSetupTimerInterrupt+0x30>)
 80083ec:	2207      	movs	r2, #7
 80083ee:	601a      	str	r2, [r3, #0]
}
 80083f0:	bf00      	nop
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr
 80083f8:	e000e010 	.word	0xe000e010
 80083fc:	e000e018 	.word	0xe000e018
 8008400:	20000228 	.word	0x20000228
 8008404:	10624dd3 	.word	0x10624dd3
 8008408:	e000e014 	.word	0xe000e014

0800840c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008412:	f3ef 8305 	mrs	r3, IPSR
 8008416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b0f      	cmp	r3, #15
 800841c:	d913      	bls.n	8008446 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800841e:	4a15      	ldr	r2, [pc, #84]	; (8008474 <vPortValidateInterruptPriority+0x68>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008428:	4b13      	ldr	r3, [pc, #76]	; (8008478 <vPortValidateInterruptPriority+0x6c>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	7afa      	ldrb	r2, [r7, #11]
 800842e:	429a      	cmp	r2, r3
 8008430:	d209      	bcs.n	8008446 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	607b      	str	r3, [r7, #4]
 8008444:	e7fe      	b.n	8008444 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <vPortValidateInterruptPriority+0x70>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <vPortValidateInterruptPriority+0x74>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d909      	bls.n	800846a <vPortValidateInterruptPriority+0x5e>
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	e7fe      	b.n	8008468 <vPortValidateInterruptPriority+0x5c>
	}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr
 8008474:	e000e3f0 	.word	0xe000e3f0
 8008478:	20000770 	.word	0x20000770
 800847c:	e000ed0c 	.word	0xe000ed0c
 8008480:	20000774 	.word	0x20000774

08008484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08a      	sub	sp, #40	; 0x28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800848c:	2300      	movs	r3, #0
 800848e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008490:	f7ff f83c 	bl	800750c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008494:	4b57      	ldr	r3, [pc, #348]	; (80085f4 <pvPortMalloc+0x170>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800849c:	f000 f90c 	bl	80086b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084a0:	4b55      	ldr	r3, [pc, #340]	; (80085f8 <pvPortMalloc+0x174>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4013      	ands	r3, r2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 808c 	bne.w	80085c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01c      	beq.n	80084ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80084b4:	2208      	movs	r2, #8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d013      	beq.n	80084ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f023 0307 	bic.w	r3, r3, #7
 80084cc:	3308      	adds	r3, #8
 80084ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <pvPortMalloc+0x6a>
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e7fe      	b.n	80084ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d068      	beq.n	80085c6 <pvPortMalloc+0x142>
 80084f4:	4b41      	ldr	r3, [pc, #260]	; (80085fc <pvPortMalloc+0x178>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d863      	bhi.n	80085c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084fe:	4b40      	ldr	r3, [pc, #256]	; (8008600 <pvPortMalloc+0x17c>)
 8008500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008502:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <pvPortMalloc+0x17c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008508:	e004      	b.n	8008514 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d903      	bls.n	8008526 <pvPortMalloc+0xa2>
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f1      	bne.n	800850a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008526:	4b33      	ldr	r3, [pc, #204]	; (80085f4 <pvPortMalloc+0x170>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852c:	429a      	cmp	r2, r3
 800852e:	d04a      	beq.n	80085c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2208      	movs	r2, #8
 8008536:	4413      	add	r3, r2
 8008538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	2308      	movs	r3, #8
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	429a      	cmp	r2, r3
 8008550:	d91e      	bls.n	8008590 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4413      	add	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <pvPortMalloc+0xf4>
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	613b      	str	r3, [r7, #16]
 8008576:	e7fe      	b.n	8008576 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800858a:	69b8      	ldr	r0, [r7, #24]
 800858c:	f000 f8f6 	bl	800877c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <pvPortMalloc+0x178>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	4a18      	ldr	r2, [pc, #96]	; (80085fc <pvPortMalloc+0x178>)
 800859c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800859e:	4b17      	ldr	r3, [pc, #92]	; (80085fc <pvPortMalloc+0x178>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b18      	ldr	r3, [pc, #96]	; (8008604 <pvPortMalloc+0x180>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d203      	bcs.n	80085b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <pvPortMalloc+0x178>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a15      	ldr	r2, [pc, #84]	; (8008604 <pvPortMalloc+0x180>)
 80085b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <pvPortMalloc+0x174>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085c6:	f7fe ffaf 	bl	8007528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <pvPortMalloc+0x164>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e7fe      	b.n	80085e6 <pvPortMalloc+0x162>
	return pvReturn;
 80085e8:	69fb      	ldr	r3, [r7, #28]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3728      	adds	r7, #40	; 0x28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20001380 	.word	0x20001380
 80085f8:	2000138c 	.word	0x2000138c
 80085fc:	20001384 	.word	0x20001384
 8008600:	20001378 	.word	0x20001378
 8008604:	20001388 	.word	0x20001388

08008608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d046      	beq.n	80086a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800861a:	2308      	movs	r3, #8
 800861c:	425b      	negs	r3, r3
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4b20      	ldr	r3, [pc, #128]	; (80086b0 <vPortFree+0xa8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <vPortFree+0x42>
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	e7fe      	b.n	8008648 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <vPortFree+0x5e>
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	e7fe      	b.n	8008664 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <vPortFree+0xa8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4013      	ands	r3, r2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d019      	beq.n	80086a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d115      	bne.n	80086a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <vPortFree+0xa8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	43db      	mvns	r3, r3
 8008686:	401a      	ands	r2, r3
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800868c:	f7fe ff3e 	bl	800750c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <vPortFree+0xac>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4413      	add	r3, r2
 800869a:	4a06      	ldr	r2, [pc, #24]	; (80086b4 <vPortFree+0xac>)
 800869c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800869e:	6938      	ldr	r0, [r7, #16]
 80086a0:	f000 f86c 	bl	800877c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086a4:	f7fe ff40 	bl	8007528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086a8:	bf00      	nop
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	2000138c 	.word	0x2000138c
 80086b4:	20001384 	.word	0x20001384

080086b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80086c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086c4:	4b27      	ldr	r3, [pc, #156]	; (8008764 <prvHeapInit+0xac>)
 80086c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3307      	adds	r3, #7
 80086d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <prvHeapInit+0xac>)
 80086e8:	4413      	add	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086f0:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <prvHeapInit+0xb0>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086f6:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <prvHeapInit+0xb0>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008704:	2208      	movs	r2, #8
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <prvHeapInit+0xb4>)
 8008718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <prvHeapInit+0xb4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <prvHeapInit+0xb4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <prvHeapInit+0xb4>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4a0a      	ldr	r2, [pc, #40]	; (8008770 <prvHeapInit+0xb8>)
 8008746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4a09      	ldr	r2, [pc, #36]	; (8008774 <prvHeapInit+0xbc>)
 800874e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008750:	4b09      	ldr	r3, [pc, #36]	; (8008778 <prvHeapInit+0xc0>)
 8008752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20000778 	.word	0x20000778
 8008768:	20001378 	.word	0x20001378
 800876c:	20001380 	.word	0x20001380
 8008770:	20001388 	.word	0x20001388
 8008774:	20001384 	.word	0x20001384
 8008778:	2000138c 	.word	0x2000138c

0800877c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008784:	4b27      	ldr	r3, [pc, #156]	; (8008824 <prvInsertBlockIntoFreeList+0xa8>)
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e002      	b.n	8008790 <prvInsertBlockIntoFreeList+0x14>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d8f7      	bhi.n	800878a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	4413      	add	r3, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d108      	bne.n	80087be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	441a      	add	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d118      	bne.n	8008804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <prvInsertBlockIntoFreeList+0xac>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d00d      	beq.n	80087fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	441a      	add	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e008      	b.n	800880c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <prvInsertBlockIntoFreeList+0xac>)
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e003      	b.n	800880c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d002      	beq.n	800881a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	20001378 	.word	0x20001378
 8008828:	20001380 	.word	0x20001380

0800882c <__cxa_pure_virtual>:
 800882c:	b508      	push	{r3, lr}
 800882e:	f000 f829 	bl	8008884 <_ZSt9terminatev>

08008832 <_ZdlPvj>:
 8008832:	f000 b819 	b.w	8008868 <_ZdlPv>

08008836 <_Znwj>:
 8008836:	b510      	push	{r4, lr}
 8008838:	2800      	cmp	r0, #0
 800883a:	bf14      	ite	ne
 800883c:	4604      	movne	r4, r0
 800883e:	2401      	moveq	r4, #1
 8008840:	4620      	mov	r0, r4
 8008842:	f000 f939 	bl	8008ab8 <malloc>
 8008846:	b930      	cbnz	r0, 8008856 <_Znwj+0x20>
 8008848:	f000 f806 	bl	8008858 <_ZSt15get_new_handlerv>
 800884c:	b908      	cbnz	r0, 8008852 <_Znwj+0x1c>
 800884e:	f000 f8ed 	bl	8008a2c <abort>
 8008852:	4780      	blx	r0
 8008854:	e7f4      	b.n	8008840 <_Znwj+0xa>
 8008856:	bd10      	pop	{r4, pc}

08008858 <_ZSt15get_new_handlerv>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <_ZSt15get_new_handlerv+0xc>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	f3bf 8f5b 	dmb	ish
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20001390 	.word	0x20001390

08008868 <_ZdlPv>:
 8008868:	f000 b92e 	b.w	8008ac8 <free>

0800886c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800886c:	b508      	push	{r3, lr}
 800886e:	4780      	blx	r0
 8008870:	f000 f8dc 	bl	8008a2c <abort>

08008874 <_ZSt13get_terminatev>:
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <_ZSt13get_terminatev+0xc>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	f3bf 8f5b 	dmb	ish
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000238 	.word	0x20000238

08008884 <_ZSt9terminatev>:
 8008884:	b508      	push	{r3, lr}
 8008886:	f7ff fff5 	bl	8008874 <_ZSt13get_terminatev>
 800888a:	f7ff ffef 	bl	800886c <_ZN10__cxxabiv111__terminateEPFvvE>

0800888e <_ZNSaIcEC1Ev>:
 800888e:	4770      	bx	lr

08008890 <_ZNSaIcED1Ev>:
 8008890:	4770      	bx	lr

08008892 <_ZSt17__throw_bad_allocv>:
 8008892:	b508      	push	{r3, lr}
 8008894:	f000 f8ca 	bl	8008a2c <abort>

08008898 <_ZSt19__throw_logic_errorPKc>:
 8008898:	b508      	push	{r3, lr}
 800889a:	f000 f8c7 	bl	8008a2c <abort>

0800889e <_ZSt20__throw_length_errorPKc>:
 800889e:	b508      	push	{r3, lr}
 80088a0:	f000 f8c4 	bl	8008a2c <abort>

080088a4 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80088a4:	b10a      	cbz	r2, 80088aa <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80088a6:	f000 b917 	b.w	8008ad8 <memcpy>
 80088aa:	4770      	bx	lr

080088ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80088ac:	6001      	str	r1, [r0, #0]
 80088ae:	4770      	bx	lr

080088b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80088b0:	6800      	ldr	r0, [r0, #0]
 80088b2:	4770      	bx	lr

080088b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80088b4:	6081      	str	r1, [r0, #8]
 80088b6:	4770      	bx	lr

080088b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80088b8:	2200      	movs	r2, #0
 80088ba:	6803      	ldr	r3, [r0, #0]
 80088bc:	6041      	str	r1, [r0, #4]
 80088be:	545a      	strb	r2, [r3, r1]
 80088c0:	4770      	bx	lr
	...

080088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80088c4:	b508      	push	{r3, lr}
 80088c6:	680b      	ldr	r3, [r1, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	da02      	bge.n	80088d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80088cc:	4809      	ldr	r0, [pc, #36]	; (80088f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80088ce:	f7ff ffe6 	bl	800889e <_ZSt20__throw_length_errorPKc>
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d908      	bls.n	80088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80088d6:	0052      	lsls	r2, r2, #1
 80088d8:	4293      	cmp	r3, r2
 80088da:	d205      	bcs.n	80088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80088dc:	2a00      	cmp	r2, #0
 80088de:	bfb6      	itet	lt
 80088e0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80088e4:	600a      	strge	r2, [r1, #0]
 80088e6:	600b      	strlt	r3, [r1, #0]
 80088e8:	6808      	ldr	r0, [r1, #0]
 80088ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088ee:	3001      	adds	r0, #1
 80088f0:	f7ff bfa1 	b.w	8008836 <_Znwj>
 80088f4:	08008f92 	.word	0x08008f92

080088f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80088f8:	4603      	mov	r3, r0
 80088fa:	f853 0b08 	ldr.w	r0, [r3], #8
 80088fe:	4298      	cmp	r0, r3
 8008900:	d001      	beq.n	8008906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008902:	f7ff bfb1 	b.w	8008868 <_ZdlPv>
 8008906:	4770      	bx	lr

08008908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008908:	2a01      	cmp	r2, #1
 800890a:	b510      	push	{r4, lr}
 800890c:	d102      	bne.n	8008914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800890e:	780a      	ldrb	r2, [r1, #0]
 8008910:	7002      	strb	r2, [r0, #0]
 8008912:	bd10      	pop	{r4, pc}
 8008914:	f7ff ffc6 	bl	80088a4 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008918:	e7fb      	b.n	8008912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800891a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800891a:	b508      	push	{r3, lr}
 800891c:	1a52      	subs	r2, r2, r1
 800891e:	f7ff fff3 	bl	8008908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008922:	bd08      	pop	{r3, pc}

08008924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008924:	b508      	push	{r3, lr}
 8008926:	1a52      	subs	r2, r2, r1
 8008928:	f7ff ffee 	bl	8008908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800892c:	bd08      	pop	{r3, pc}

0800892e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800892e:	4288      	cmp	r0, r1
 8008930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008932:	4604      	mov	r4, r0
 8008934:	460e      	mov	r6, r1
 8008936:	d020      	beq.n	800897a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8008938:	6802      	ldr	r2, [r0, #0]
 800893a:	f100 0308 	add.w	r3, r0, #8
 800893e:	429a      	cmp	r2, r3
 8008940:	bf08      	it	eq
 8008942:	220f      	moveq	r2, #15
 8008944:	684d      	ldr	r5, [r1, #4]
 8008946:	bf18      	it	ne
 8008948:	6882      	ldrne	r2, [r0, #8]
 800894a:	42aa      	cmp	r2, r5
 800894c:	d20b      	bcs.n	8008966 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800894e:	a902      	add	r1, sp, #8
 8008950:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008954:	f7ff ffb6 	bl	80088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008958:	4607      	mov	r7, r0
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff ffcc 	bl	80088f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	6027      	str	r7, [r4, #0]
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	b125      	cbz	r5, 8008972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8008968:	462a      	mov	r2, r5
 800896a:	6831      	ldr	r1, [r6, #0]
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	f7ff ffcb 	bl	8008908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008972:	2200      	movs	r2, #0
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	6065      	str	r5, [r4, #4]
 8008978:	555a      	strb	r2, [r3, r5]
 800897a:	b003      	add	sp, #12
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800897e:	b510      	push	{r4, lr}
 8008980:	4604      	mov	r4, r0
 8008982:	f7ff ffb9 	bl	80088f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008986:	4620      	mov	r0, r4
 8008988:	bd10      	pop	{r4, pc}

0800898a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800898a:	b510      	push	{r4, lr}
 800898c:	4604      	mov	r4, r0
 800898e:	f7ff ffce 	bl	800892e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8008992:	4620      	mov	r0, r4
 8008994:	bd10      	pop	{r4, pc}

08008996 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008996:	6800      	ldr	r0, [r0, #0]
 8008998:	4770      	bx	lr

0800899a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800899a:	b510      	push	{r4, lr}
 800899c:	4604      	mov	r4, r0
 800899e:	f100 0208 	add.w	r2, r0, #8
 80089a2:	6002      	str	r2, [r0, #0]
 80089a4:	e9d1 1200 	ldrd	r1, r2, [r1]
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	440a      	add	r2, r1
 80089ae:	f7f8 fcd9 	bl	8001364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80089b2:	4620      	mov	r0, r4
 80089b4:	bd10      	pop	{r4, pc}
	...

080089b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80089b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ba:	4604      	mov	r4, r0
 80089bc:	4616      	mov	r6, r2
 80089be:	460d      	mov	r5, r1
 80089c0:	b919      	cbnz	r1, 80089ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80089c2:	b112      	cbz	r2, 80089ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80089c6:	f7ff ff67 	bl	8008898 <_ZSt19__throw_logic_errorPKc>
 80089ca:	1b73      	subs	r3, r6, r5
 80089cc:	2b0f      	cmp	r3, #15
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	d907      	bls.n	80089e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80089d2:	2200      	movs	r2, #0
 80089d4:	a901      	add	r1, sp, #4
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff ff74 	bl	80088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	60a3      	str	r3, [r4, #8]
 80089e2:	4632      	mov	r2, r6
 80089e4:	4629      	mov	r1, r5
 80089e6:	6820      	ldr	r0, [r4, #0]
 80089e8:	f7ff ff9c 	bl	8008924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80089ec:	2100      	movs	r1, #0
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	6822      	ldr	r2, [r4, #0]
 80089f2:	6063      	str	r3, [r4, #4]
 80089f4:	54d1      	strb	r1, [r2, r3]
 80089f6:	b002      	add	sp, #8
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	bf00      	nop
 80089fc:	08008f68 	.word	0x08008f68

08008a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	f100 0308 	add.w	r3, r0, #8
 8008a06:	4604      	mov	r4, r0
 8008a08:	6003      	str	r3, [r0, #0]
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	b159      	cbz	r1, 8008a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008a0e:	4608      	mov	r0, r1
 8008a10:	f7f7 fb9e 	bl	8000150 <strlen>
 8008a14:	182a      	adds	r2, r5, r0
 8008a16:	4620      	mov	r0, r4
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7ff ffcb 	bl	80089b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008a22:	4620      	mov	r0, r4
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a2a:	e7f4      	b.n	8008a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08008a2c <abort>:
 8008a2c:	b508      	push	{r3, lr}
 8008a2e:	2006      	movs	r0, #6
 8008a30:	f000 f990 	bl	8008d54 <raise>
 8008a34:	2001      	movs	r0, #1
 8008a36:	f7fb fa22 	bl	8003e7e <_exit>
	...

08008a3c <clock>:
 8008a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <clock+0x24>)
 8008a40:	4669      	mov	r1, sp
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	f000 f9a2 	bl	8008d8c <_times_r>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d006      	beq.n	8008a5a <clock+0x1e>
 8008a4c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008a50:	4418      	add	r0, r3
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	4418      	add	r0, r3
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	4418      	add	r0, r3
 8008a5a:	b005      	add	sp, #20
 8008a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a60:	2000023c 	.word	0x2000023c

08008a64 <__errno>:
 8008a64:	4b01      	ldr	r3, [pc, #4]	; (8008a6c <__errno+0x8>)
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	2000023c 	.word	0x2000023c

08008a70 <__libc_init_array>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	2500      	movs	r5, #0
 8008a74:	4e0c      	ldr	r6, [pc, #48]	; (8008aa8 <__libc_init_array+0x38>)
 8008a76:	4c0d      	ldr	r4, [pc, #52]	; (8008aac <__libc_init_array+0x3c>)
 8008a78:	1ba4      	subs	r4, r4, r6
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	42a5      	cmp	r5, r4
 8008a7e:	d109      	bne.n	8008a94 <__libc_init_array+0x24>
 8008a80:	f000 f98a 	bl	8008d98 <_init>
 8008a84:	2500      	movs	r5, #0
 8008a86:	4e0a      	ldr	r6, [pc, #40]	; (8008ab0 <__libc_init_array+0x40>)
 8008a88:	4c0a      	ldr	r4, [pc, #40]	; (8008ab4 <__libc_init_array+0x44>)
 8008a8a:	1ba4      	subs	r4, r4, r6
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	42a5      	cmp	r5, r4
 8008a90:	d105      	bne.n	8008a9e <__libc_init_array+0x2e>
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a98:	4798      	blx	r3
 8008a9a:	3501      	adds	r5, #1
 8008a9c:	e7ee      	b.n	8008a7c <__libc_init_array+0xc>
 8008a9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aa2:	4798      	blx	r3
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	e7f2      	b.n	8008a8e <__libc_init_array+0x1e>
 8008aa8:	08008fac 	.word	0x08008fac
 8008aac:	08008fac 	.word	0x08008fac
 8008ab0:	08008fac 	.word	0x08008fac
 8008ab4:	08008fb8 	.word	0x08008fb8

08008ab8 <malloc>:
 8008ab8:	4b02      	ldr	r3, [pc, #8]	; (8008ac4 <malloc+0xc>)
 8008aba:	4601      	mov	r1, r0
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	f000 b883 	b.w	8008bc8 <_malloc_r>
 8008ac2:	bf00      	nop
 8008ac4:	2000023c 	.word	0x2000023c

08008ac8 <free>:
 8008ac8:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <free+0xc>)
 8008aca:	4601      	mov	r1, r0
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f000 b82f 	b.w	8008b30 <_free_r>
 8008ad2:	bf00      	nop
 8008ad4:	2000023c 	.word	0x2000023c

08008ad8 <memcpy>:
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	1e43      	subs	r3, r0, #1
 8008adc:	440a      	add	r2, r1
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	d100      	bne.n	8008ae4 <memcpy+0xc>
 8008ae2:	bd10      	pop	{r4, pc}
 8008ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aec:	e7f7      	b.n	8008ade <memcpy+0x6>

08008aee <memmove>:
 8008aee:	4288      	cmp	r0, r1
 8008af0:	b510      	push	{r4, lr}
 8008af2:	eb01 0302 	add.w	r3, r1, r2
 8008af6:	d807      	bhi.n	8008b08 <memmove+0x1a>
 8008af8:	1e42      	subs	r2, r0, #1
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d00a      	beq.n	8008b14 <memmove+0x26>
 8008afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b06:	e7f8      	b.n	8008afa <memmove+0xc>
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	d9f5      	bls.n	8008af8 <memmove+0xa>
 8008b0c:	1881      	adds	r1, r0, r2
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	42d3      	cmn	r3, r2
 8008b12:	d100      	bne.n	8008b16 <memmove+0x28>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b1e:	e7f7      	b.n	8008b10 <memmove+0x22>

08008b20 <memset>:
 8008b20:	4603      	mov	r3, r0
 8008b22:	4402      	add	r2, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d100      	bne.n	8008b2a <memset+0xa>
 8008b28:	4770      	bx	lr
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7f9      	b.n	8008b24 <memset+0x4>

08008b30 <_free_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4605      	mov	r5, r0
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d043      	beq.n	8008bc0 <_free_r+0x90>
 8008b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3c:	1f0c      	subs	r4, r1, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfb8      	it	lt
 8008b42:	18e4      	addlt	r4, r4, r3
 8008b44:	f000 f925 	bl	8008d92 <__malloc_lock>
 8008b48:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <_free_r+0x94>)
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	b933      	cbnz	r3, 8008b5e <_free_r+0x2e>
 8008b50:	6063      	str	r3, [r4, #4]
 8008b52:	6014      	str	r4, [r2, #0]
 8008b54:	4628      	mov	r0, r5
 8008b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5a:	f000 b91b 	b.w	8008d94 <__malloc_unlock>
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	d90b      	bls.n	8008b7a <_free_r+0x4a>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	1862      	adds	r2, r4, r1
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bf01      	itttt	eq
 8008b6a:	681a      	ldreq	r2, [r3, #0]
 8008b6c:	685b      	ldreq	r3, [r3, #4]
 8008b6e:	1852      	addeq	r2, r2, r1
 8008b70:	6022      	streq	r2, [r4, #0]
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6004      	str	r4, [r0, #0]
 8008b76:	e7ed      	b.n	8008b54 <_free_r+0x24>
 8008b78:	4613      	mov	r3, r2
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	b10a      	cbz	r2, 8008b82 <_free_r+0x52>
 8008b7e:	42a2      	cmp	r2, r4
 8008b80:	d9fa      	bls.n	8008b78 <_free_r+0x48>
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	1858      	adds	r0, r3, r1
 8008b86:	42a0      	cmp	r0, r4
 8008b88:	d10b      	bne.n	8008ba2 <_free_r+0x72>
 8008b8a:	6820      	ldr	r0, [r4, #0]
 8008b8c:	4401      	add	r1, r0
 8008b8e:	1858      	adds	r0, r3, r1
 8008b90:	4282      	cmp	r2, r0
 8008b92:	6019      	str	r1, [r3, #0]
 8008b94:	d1de      	bne.n	8008b54 <_free_r+0x24>
 8008b96:	6810      	ldr	r0, [r2, #0]
 8008b98:	6852      	ldr	r2, [r2, #4]
 8008b9a:	4401      	add	r1, r0
 8008b9c:	6019      	str	r1, [r3, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
 8008ba0:	e7d8      	b.n	8008b54 <_free_r+0x24>
 8008ba2:	d902      	bls.n	8008baa <_free_r+0x7a>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	e7d4      	b.n	8008b54 <_free_r+0x24>
 8008baa:	6820      	ldr	r0, [r4, #0]
 8008bac:	1821      	adds	r1, r4, r0
 8008bae:	428a      	cmp	r2, r1
 8008bb0:	bf01      	itttt	eq
 8008bb2:	6811      	ldreq	r1, [r2, #0]
 8008bb4:	6852      	ldreq	r2, [r2, #4]
 8008bb6:	1809      	addeq	r1, r1, r0
 8008bb8:	6021      	streq	r1, [r4, #0]
 8008bba:	6062      	str	r2, [r4, #4]
 8008bbc:	605c      	str	r4, [r3, #4]
 8008bbe:	e7c9      	b.n	8008b54 <_free_r+0x24>
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20001394 	.word	0x20001394

08008bc8 <_malloc_r>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	1ccd      	adds	r5, r1, #3
 8008bcc:	f025 0503 	bic.w	r5, r5, #3
 8008bd0:	3508      	adds	r5, #8
 8008bd2:	2d0c      	cmp	r5, #12
 8008bd4:	bf38      	it	cc
 8008bd6:	250c      	movcc	r5, #12
 8008bd8:	2d00      	cmp	r5, #0
 8008bda:	4606      	mov	r6, r0
 8008bdc:	db01      	blt.n	8008be2 <_malloc_r+0x1a>
 8008bde:	42a9      	cmp	r1, r5
 8008be0:	d903      	bls.n	8008bea <_malloc_r+0x22>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	2000      	movs	r0, #0
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
 8008bea:	f000 f8d2 	bl	8008d92 <__malloc_lock>
 8008bee:	4a21      	ldr	r2, [pc, #132]	; (8008c74 <_malloc_r+0xac>)
 8008bf0:	6814      	ldr	r4, [r2, #0]
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	b991      	cbnz	r1, 8008c1c <_malloc_r+0x54>
 8008bf6:	4c20      	ldr	r4, [pc, #128]	; (8008c78 <_malloc_r+0xb0>)
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	b91b      	cbnz	r3, 8008c04 <_malloc_r+0x3c>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 f871 	bl	8008ce4 <_sbrk_r>
 8008c02:	6020      	str	r0, [r4, #0]
 8008c04:	4629      	mov	r1, r5
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f86c 	bl	8008ce4 <_sbrk_r>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d124      	bne.n	8008c5a <_malloc_r+0x92>
 8008c10:	230c      	movs	r3, #12
 8008c12:	4630      	mov	r0, r6
 8008c14:	6033      	str	r3, [r6, #0]
 8008c16:	f000 f8bd 	bl	8008d94 <__malloc_unlock>
 8008c1a:	e7e4      	b.n	8008be6 <_malloc_r+0x1e>
 8008c1c:	680b      	ldr	r3, [r1, #0]
 8008c1e:	1b5b      	subs	r3, r3, r5
 8008c20:	d418      	bmi.n	8008c54 <_malloc_r+0x8c>
 8008c22:	2b0b      	cmp	r3, #11
 8008c24:	d90f      	bls.n	8008c46 <_malloc_r+0x7e>
 8008c26:	600b      	str	r3, [r1, #0]
 8008c28:	18cc      	adds	r4, r1, r3
 8008c2a:	50cd      	str	r5, [r1, r3]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f8b1 	bl	8008d94 <__malloc_unlock>
 8008c32:	f104 000b 	add.w	r0, r4, #11
 8008c36:	1d23      	adds	r3, r4, #4
 8008c38:	f020 0007 	bic.w	r0, r0, #7
 8008c3c:	1ac3      	subs	r3, r0, r3
 8008c3e:	d0d3      	beq.n	8008be8 <_malloc_r+0x20>
 8008c40:	425a      	negs	r2, r3
 8008c42:	50e2      	str	r2, [r4, r3]
 8008c44:	e7d0      	b.n	8008be8 <_malloc_r+0x20>
 8008c46:	684b      	ldr	r3, [r1, #4]
 8008c48:	428c      	cmp	r4, r1
 8008c4a:	bf16      	itet	ne
 8008c4c:	6063      	strne	r3, [r4, #4]
 8008c4e:	6013      	streq	r3, [r2, #0]
 8008c50:	460c      	movne	r4, r1
 8008c52:	e7eb      	b.n	8008c2c <_malloc_r+0x64>
 8008c54:	460c      	mov	r4, r1
 8008c56:	6849      	ldr	r1, [r1, #4]
 8008c58:	e7cc      	b.n	8008bf4 <_malloc_r+0x2c>
 8008c5a:	1cc4      	adds	r4, r0, #3
 8008c5c:	f024 0403 	bic.w	r4, r4, #3
 8008c60:	42a0      	cmp	r0, r4
 8008c62:	d005      	beq.n	8008c70 <_malloc_r+0xa8>
 8008c64:	1a21      	subs	r1, r4, r0
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f83c 	bl	8008ce4 <_sbrk_r>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d0cf      	beq.n	8008c10 <_malloc_r+0x48>
 8008c70:	6025      	str	r5, [r4, #0]
 8008c72:	e7db      	b.n	8008c2c <_malloc_r+0x64>
 8008c74:	20001394 	.word	0x20001394
 8008c78:	20001398 	.word	0x20001398

08008c7c <rand>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <rand+0x50>)
 8008c80:	681c      	ldr	r4, [r3, #0]
 8008c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c84:	b97b      	cbnz	r3, 8008ca6 <rand+0x2a>
 8008c86:	2018      	movs	r0, #24
 8008c88:	f7ff ff16 	bl	8008ab8 <malloc>
 8008c8c:	4a10      	ldr	r2, [pc, #64]	; (8008cd0 <rand+0x54>)
 8008c8e:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <rand+0x58>)
 8008c90:	63a0      	str	r0, [r4, #56]	; 0x38
 8008c92:	e9c0 2300 	strd	r2, r3, [r0]
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <rand+0x5c>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	6083      	str	r3, [r0, #8]
 8008c9c:	230b      	movs	r3, #11
 8008c9e:	8183      	strh	r3, [r0, #12]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ca8:	480c      	ldr	r0, [pc, #48]	; (8008cdc <rand+0x60>)
 8008caa:	690a      	ldr	r2, [r1, #16]
 8008cac:	694b      	ldr	r3, [r1, #20]
 8008cae:	4350      	muls	r0, r2
 8008cb0:	4c0b      	ldr	r4, [pc, #44]	; (8008ce0 <rand+0x64>)
 8008cb2:	fb04 0003 	mla	r0, r4, r3, r0
 8008cb6:	fba2 2304 	umull	r2, r3, r2, r4
 8008cba:	4403      	add	r3, r0
 8008cbc:	1c54      	adds	r4, r2, #1
 8008cbe:	f143 0500 	adc.w	r5, r3, #0
 8008cc2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8008cc6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	2000023c 	.word	0x2000023c
 8008cd0:	abcd330e 	.word	0xabcd330e
 8008cd4:	e66d1234 	.word	0xe66d1234
 8008cd8:	0005deec 	.word	0x0005deec
 8008cdc:	5851f42d 	.word	0x5851f42d
 8008ce0:	4c957f2d 	.word	0x4c957f2d

08008ce4 <_sbrk_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4c05      	ldr	r4, [pc, #20]	; (8008d00 <_sbrk_r+0x1c>)
 8008cea:	4605      	mov	r5, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	f7fb f8da 	bl	8003ea8 <_sbrk>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_sbrk_r+0x1a>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_sbrk_r+0x1a>
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	200013e8 	.word	0x200013e8

08008d04 <_raise_r>:
 8008d04:	291f      	cmp	r1, #31
 8008d06:	b538      	push	{r3, r4, r5, lr}
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	d904      	bls.n	8008d18 <_raise_r+0x14>
 8008d0e:	2316      	movs	r3, #22
 8008d10:	6003      	str	r3, [r0, #0]
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d1a:	b112      	cbz	r2, 8008d22 <_raise_r+0x1e>
 8008d1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d20:	b94b      	cbnz	r3, 8008d36 <_raise_r+0x32>
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f830 	bl	8008d88 <_getpid_r>
 8008d28:	462a      	mov	r2, r5
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d32:	f000 b817 	b.w	8008d64 <_kill_r>
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d00a      	beq.n	8008d50 <_raise_r+0x4c>
 8008d3a:	1c59      	adds	r1, r3, #1
 8008d3c:	d103      	bne.n	8008d46 <_raise_r+0x42>
 8008d3e:	2316      	movs	r3, #22
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7e7      	b.n	8008d16 <_raise_r+0x12>
 8008d46:	2400      	movs	r4, #0
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d4e:	4798      	blx	r3
 8008d50:	2000      	movs	r0, #0
 8008d52:	e7e0      	b.n	8008d16 <_raise_r+0x12>

08008d54 <raise>:
 8008d54:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <raise+0xc>)
 8008d56:	4601      	mov	r1, r0
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f7ff bfd3 	b.w	8008d04 <_raise_r>
 8008d5e:	bf00      	nop
 8008d60:	2000023c 	.word	0x2000023c

08008d64 <_kill_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	2300      	movs	r3, #0
 8008d68:	4c06      	ldr	r4, [pc, #24]	; (8008d84 <_kill_r+0x20>)
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	f7fb f874 	bl	8003e5e <_kill>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d102      	bne.n	8008d80 <_kill_r+0x1c>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	b103      	cbz	r3, 8008d80 <_kill_r+0x1c>
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	bd38      	pop	{r3, r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	200013e8 	.word	0x200013e8

08008d88 <_getpid_r>:
 8008d88:	f7fb b862 	b.w	8003e50 <_getpid>

08008d8c <_times_r>:
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	f7fb b880 	b.w	8003e92 <_times>

08008d92 <__malloc_lock>:
 8008d92:	4770      	bx	lr

08008d94 <__malloc_unlock>:
 8008d94:	4770      	bx	lr
	...

08008d98 <_init>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

08008da4 <_fini>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr
